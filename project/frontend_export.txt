REACT FRONTEND EXPORT
Date: 2025-03-12T21:42:43.692Z
Project Structure: C:\forkina-FullStackProject-main(ROD_BELEK)\forkina-FullStackProject-main\project
================================================================================


================================================================================
FILE: src\api\authApi.js
================================================================================

// src/api/authApi.js
import { api } from './axiosConfig';

export const login = async (credentials) => {
  try {
    const response = await api.post('/auth/login', credentials);
    const { token } = response.data;
    localStorage.setItem('token', token);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Login failed');
  }
};

================================================================================
FILE: src\api\axiosConfig.js
================================================================================

// src/api/axiosConfig.js
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

// Create axios instance with base configuration
export const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add authentication interceptor
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Add response interceptor
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);


================================================================================
FILE: src\api\classApi.js
================================================================================

// src/api/classApi.js
import { api } from './axiosConfig';

// Fetch all classes (for admin or tutor)
export const fetchClasses = async () => {
  try {
    const response = await api.get('/classes');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to fetch classes');
  }
};

// Fetch a specific class by ID
export const fetchClassById = async (classId) => {
  try {
    const response = await api.get(`/classes/${classId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to fetch class');
  }
};

// Create a new class (Admin only)
export const createClass = async (classData) => {
  try {
    const response = await api.post('/classes', classData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to create class');
  }
};

// Update a class (Admin only)
export const updateClass = async (classId, classData) => {
  try {
    const response = await api.put(`/classes/${classId}`, classData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to update class');
  }
};

// Delete a class (Admin only)
export const deleteClass = async (classId) => {
  try {
    const response = await api.delete(`/classes/${classId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to delete class');
  }
};

// Add students to a class (Admin only)
export const addStudentsToClass = async (classId, studentIds) => {
  try {
    const response = await api.post('/classes/add-students', { classId, studentIds });
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to add students to class');
  }
};

// Fetch all students for a tutor (across all their classes)
export const fetchStudentsForTutor = async () => {
  try {
    const response = await api.get('/classes/tutor/students');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to fetch students');
  }
};

================================================================================
FILE: src\api\taskApi.js
================================================================================

import { api } from './axiosConfig';

export const fetchTutorTasks = async () => {
  try {
    const response = await api.get('/tutor/tasks');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.error || error.response?.statusText || 'Failed to fetch tutor tasks');
  }
};

export const fetchTasksByProject = async (projectId) => {
  try {
    const response = await api.get(`/tasks/project/${projectId}/tasks`);
    return response.data;
  } catch (error) {
    const status = error.response?.status;
    const message = error.response?.data?.error || error.response?.data?.details || error.response?.statusText || 'Failed to fetch tasks';
    throw new Error(`${message} (Status: ${status || 'unknown'})`);
  }
};

export const updateTaskStatus = async (taskId, newStatus) => {
  try {
    await api.put(`/tasks/${taskId}`, { status: newStatus });
  } catch (error) {
    throw new Error(error.response?.data?.error || 'Failed to update task status');
  }
};
================================================================================
FILE: src\api\userApi.js
================================================================================



// src/api/userApi.js
import { api } from './axiosConfig';

export const fetchUsers = async (role) => {
  try {
    const params = role ? { role } : {};
    const response = await api.get('/users', { params });
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to fetch users');
  }
};

export const createUser = async (userData) => {
  try {
    const response = await api.post('/users', userData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Failed to create user');
  }
};

export const updateUser = async (userData) => {
  try {
    const response = await api.put(`/users/${userData._id}`, userData);
    return response.data;
  } catch (error) {
    console.error('Update error:', error.response?.data || error);
    throw new Error(error.response?.data?.message || 'Failed to update user');
  }
};

export const deleteUser = async (userId) => {
  try {
    console.log('Deleting user with ID:', userId);
    const response = await api.delete(`/users/${userId}`);
    console.log('Delete response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Delete error:', error.response?.data || error);
    throw new Error(error.response?.data?.message || 'Failed to delete user');
  }
};
================================================================================
FILE: src\components\dialogs\DeleteConfirmDialog.jsx
================================================================================


// src/components/dialogs/DeleteConfirmDialog.jsx
//delete user
import PropTypes from 'prop-types';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography
} from '@mui/material';

const DeleteConfirmDialog = ({ open, onClose, onConfirm, userName }) => {
  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>Confirm Delete</DialogTitle>
      <DialogContent>
        <Typography>
          Are you sure you want to delete user {userName}? This action cannot be undone.
        </Typography>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={onConfirm} color="error" variant="contained">
          Delete
        </Button>
      </DialogActions>
    </Dialog>
  );
};

DeleteConfirmDialog.propTypes = {
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onConfirm: PropTypes.func.isRequired,
  userName: PropTypes.string.isRequired
};

export default DeleteConfirmDialog;
================================================================================
FILE: src\components\dialogs\EditProfileDialog.jsx
================================================================================


import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Avatar,
  Typography
} from '@mui/material';
import { PhotoCamera } from '@mui/icons-material';
import Swal from 'sweetalert2';

const EditProfileDialog = ({ open, onClose, user, onUpdate }) => {
  const [formData, setFormData] = useState({
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    email: user?.email || '',
    educationLevel: user?.educationLevel || '',
    profilePicture: user?.profilePicture || '',
    cin: user?.cin || '',
    classe: user?.classe || '--'
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [newProfilePicture, setNewProfilePicture] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);

  // Reset form when dialog opens with new user data
  useEffect(() => {
    if (open) {
      setFormData({
        firstName: user?.firstName || '',
        lastName: user?.lastName || '',
        email: user?.email || '',
        educationLevel: user?.educationLevel || '',
        profilePicture: user?.profilePicture || '',
        cin: user?.cin || '',
        classe: user?.classe || '--'
      });
      setNewProfilePicture(null);
      setPreviewUrl(null);
      setError('');
    }
  }, [open, user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleImageChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('Image size should be less than 5MB');
      return;
    }

    // Validate file type
    if (!file.type.startsWith('image/')) {
      setError('Please upload an image file');
      return;
    }

    // Create preview URL
    const reader = new FileReader();
    reader.onloadend = () => {
      setPreviewUrl(reader.result);
    };
    reader.readAsDataURL(file);

    setNewProfilePicture(file);
    setError(''); // Clear any previous errors
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const token = localStorage.getItem('token');
      let updatedData = { ...formData };

      if (newProfilePicture) {
        const imageFormData = new FormData();
        imageFormData.append('faceImage', newProfilePicture);

        const imageResponse = await fetch('http://localhost:5001/api/face-detection/upload', {
          method: 'POST',
          body: imageFormData
        });

        if (!imageResponse.ok) {
          throw new Error('Failed to upload profile picture');
        }

        const imageData = await imageResponse.json();
        updatedData.profilePicture = imageData.filePath;
      }

      const response = await fetch(`http://localhost:5001/api/users/${user._id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(updatedData)
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || 'Failed to update profile');
      }

      const updatedUser = await response.json();
      onUpdate(updatedUser);
      onClose();
      
      // Updated success message styling with auto-close
      setTimeout(() => {
        Swal.fire({
          icon: 'success',
          title: 'Good job!',
          text: 'Profile updated successfully!',
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true,
          customClass: {
            popup: 'swal2-popup-custom',
            icon: 'swal2-icon-custom'
          },
          width: '400px',
          padding: '2em',
          showClass: {
            popup: 'animate__animated animate__fadeIn'
          },
          hideClass: {
            popup: 'animate__animated animate__fadeOut'
          }
        });
      }, 100);
      
    } catch (err) {
      console.error('Update error:', err);
      setError(err.message);
      
      // Error message styling
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: err.message || 'Failed to update profile',
        timer: 2000,
        showConfirmButton: false,
        timerProgressBar: true,
        customClass: {
          popup: 'swal2-popup-custom',
          icon: 'swal2-icon-custom'
        }
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="sm" 
      fullWidth
      PaperProps={{
        sx: {
          maxHeight: '90vh',
          overflowY: 'auto'
        }
      }}
    >
      <DialogTitle>Edit Profile</DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          
          {/* Profile Picture Section */}
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 3 }}>
            <Avatar
              src={previewUrl || (formData.profilePicture ? `http://localhost:5001${formData.profilePicture}` : 
                   (user?.faceImage ? `http://localhost:5001${user.faceImage}` : null))}
              sx={{
                width: 100,
                height: 100,
                mb: 2,
                bgcolor: '#dd2825'
              }}
            >
              {!previewUrl && !formData.profilePicture && !user?.faceImage && user?.firstName?.charAt(0)}
            </Avatar>
            
            <Button
              component="label"
              variant="contained"
              startIcon={<PhotoCamera />}
              sx={{
                mb: 2,
                bgcolor: '#dd2825',
                '&:hover': { bgcolor: 'rgba(221, 40, 37, 0.9)' },
                color: 'white'
              }}
            >
              Change Picture
              <input
                type="file"
                hidden
                accept="image/*"
                onChange={handleImageChange}
              />
            </Button>
            
            <Typography variant="caption" color="textSecondary">
              Click to upload a new profile picture (max 5MB)
            </Typography>
          </Box>

          <Box sx={{ display: 'grid', gap: 2 }}>
            <TextField
              name="firstName"
              label="First Name"
              value={formData.firstName}
              onChange={handleChange}
              fullWidth
              required
            />
            <TextField
              name="lastName"
              label="Last Name"
              value={formData.lastName}
              onChange={handleChange}
              fullWidth
              required
            />
            <TextField
              name="email"
              label="Email"
              value={formData.email}
              onChange={handleChange}
              fullWidth
              required
              type="email"
            />
            {user?.userRole === 'STUDENT' && (
              <>
                <FormControl fullWidth>
                  <InputLabel>Education Level</InputLabel>
                  <Select
                    name="educationLevel"
                    value={formData.educationLevel}
                    onChange={handleChange}
                    label="Education Level"
                  >
                    <MenuItem value="BEGINNER">Beginner</MenuItem>
                    <MenuItem value="INTERMEDIATE">Intermediate</MenuItem>
                    <MenuItem value="ADVANCED">Advanced</MenuItem>
                  </Select>
                </FormControl>
                
                <TextField
                  name="cin"
                  label="CIN (Carte d'Identité Nationale)"
                  value={formData.cin}
                  onChange={handleChange}
                  fullWidth
                  inputProps={{ maxLength: 8 }}
                  helperText="Numéro d'identité nationale"
                />
                
                {/* Classe modifiable uniquement par l'administrateur */}
                <TextField
                  name="classe"
                  label="Classe"
                  value={formData.classe}
                  onChange={handleChange}
                  fullWidth
                  disabled={user.userRole !== 'ADMIN'} // Désactivé si l'utilisateur n'est pas admin
                  helperText={user.userRole !== 'ADMIN' ? "Seul l'administrateur peut modifier ce champ" : "Indiquez la classe de l'étudiant"}
                />
              </>
            )}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button 
            type="submit" 
            variant="contained"
            disabled={loading}
            sx={{ 
              bgcolor: '#dd2825',
              '&:hover': { bgcolor: 'rgba(221, 40, 37, 0.9)' },
              color: 'white'
            }}
          >
            {loading ? 'Saving...' : 'Save Changes'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default EditProfileDialog;
================================================================================
FILE: src\components\dialogs\UserDetailsDialog.jsx
================================================================================

// src/components/dialogs/UserDetailsDialog.jsx
import PropTypes from 'prop-types';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Typography,
  Chip,
  Box,
  Divider
} from '@mui/material';

const LabelValue = ({ label, value, chip }) => (
  <Box sx={{ mb: 2 }}>
    <Typography variant="subtitle2" color="text.secondary">
      {label}
    </Typography>
    {chip ? (
      <Chip 
        label={value} 
        color={chip.color} 
        size="small" 
        sx={{ mt: 0.5 }}
      />
    ) : (
      <Typography variant="body1">{value || 'Not specified'}</Typography>
    )}
  </Box>
);

LabelValue.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.any,
  chip: PropTypes.shape({
    color: PropTypes.string
  })
};

const UserDetailsDialog = ({ open, onClose, user }) => {
  if (!user) return null;

  const getRoleColor = (role) => {
    if (!role) return 'default';
    const upperRole = role.toUpperCase();
    switch (upperRole) {
      case 'ADMIN': return 'error';
      case 'TUTOR': return 'warning';
      case 'STUDENT': return 'primary';
      default: return 'default';
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        User Details
      </DialogTitle>
      <DialogContent>
        <Grid container spacing={2}>
          <Grid item xs={12}>
            <Box sx={{ mb: 3, mt: 1 }}>
              <Typography variant="h6">
                {user.firstName} {user.lastName}
              </Typography>
              <Typography variant="subtitle1" color="text.secondary">
                ID: {user._id}
              </Typography>
            </Box>
          </Grid>
          
          <Grid item xs={12}>
            <Divider sx={{ mb: 2 }} />
            <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
              Informations de base
            </Typography>
          </Grid>
          
          <Grid item xs={12} md={6}>
            <LabelValue label="Email" value={user.email} />
            <LabelValue
            label="Role" value={user.userRole} chip={{ color: getRoleColor(user.userRole) }} />
            <LabelValue label="Account Status" value={user.accountStatus ? 'Active' : 'Inactive'} chip={{ color: user.accountStatus ? 'success' : 'error' }} />
            </Grid>
            <Grid item xs={12} md={6}>
            <LabelValue label="Birth Date" value={user.birthDate ? new Date(user.birthDate).toLocaleDateString() : 'Not provided'} />
            <LabelValue label="Department" value={user.department} />
            </Grid>
            
            {user.userRole === 'STUDENT' && (
            <>
            <Grid item xs={12}>
            <Divider sx={{ mb: 2 }} />
            <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
            Academic Information
            </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
            <LabelValue label="Education Level" value={user.educationLevel || 'BEGINNER'} chip={{
            color: user.educationLevel === 'ADVANCED' ? 'success' :
            user.educationLevel === 'INTERMEDIATE' ? 'primary' : 'default'
            }} />
            <LabelValue label="CIN" value={user.cin} />
            </Grid>
            <Grid item xs={12} md={6}>
            <LabelValue label="Class" value={user.classe?.name || 'Not assigned'} />
            </Grid>
            </>
            )}
            
            <Grid item xs={12}> <Divider sx={{ mb: 2 }} /> <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}> Account Information </Typography> </Grid> <Grid item xs={12} md={6}> <LabelValue label="Created At" value={user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'} /> <LabelValue label="Last Login" value={user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'} /> </Grid> <Grid item xs={12} md={6}> <LabelValue label="Email Verified" value={user.isEmailVerified ? 'Verified' : 'Not verified'} chip={{ color: user.isEmailVerified ? 'success' : 'warning' }} /> </Grid> </Grid> </DialogContent> <DialogActions> <Button onClick={onClose}>Close</Button> </DialogActions> </Dialog> ); };
            UserDetailsDialog.propTypes = {
            open: PropTypes.bool.isRequired,
            onClose: PropTypes.func.isRequired,
            user: PropTypes.shape({
            _id: PropTypes.string,
            firstName: PropTypes.string,
            lastName: PropTypes.string,
            email: PropTypes.string,
            userRole: PropTypes.string,
            accountStatus: PropTypes.bool,
            birthDate: PropTypes.string,
            educationLevel: PropTypes.string,
            department: PropTypes.string,
            cin: PropTypes.string,
            classe: PropTypes.any,
            createdAt: PropTypes.string,
            lastLogin: PropTypes.string,
            isEmailVerified: PropTypes.bool
            })
            };
            
            export default UserDetailsDialog;
================================================================================
FILE: src\components\dialogs\UserEditDialog.jsx
================================================================================

// src/components/dialogs/UserEditDialog.jsx
import { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Switch,
  FormControlLabel
} from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';
import { fetchClasses } from '../../api/classApi';

const UserEditDialog = ({ open, onClose, user, onSubmit }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    userRole: 'STUDENT',
    accountStatus: true,
    birthDate: null,
    educationLevel: 'BEGINNER',
    department: '',
    cin: '',
    classe: null
  });
  const [classes, setClasses] = useState([]);

  useEffect(() => {
    if (user) {
      setFormData({
        ...user,
        birthDate: user.birthDate ? dayjs(user.birthDate) : null,
        classe: user.classe?._id || null
      });
    }
  }, [user]);

  useEffect(() => {
    const fetchAllClasses = async () => {
      try {
        const data = await fetchClasses();
        setClasses(data);
      } catch (err) {
        console.error('Error fetching classes:', err);
      }
    };
    fetchAllClasses();
  }, []);

  const handleChange = (event) => {
    const { name, value, checked } = event.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'accountStatus' ? checked : value
    }));
  };

  const handleDateChange = (date) => {
    setFormData(prev => ({
      ...prev,
      birthDate: date
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const submitData = {
      ...formData,
      birthDate: formData.birthDate ? formData.birthDate.format('YYYY-MM-DD') : null,
      _id: user._id
    };
    onSubmit(submitData);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>Edit User</DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent>
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <TextField
                required
                fullWidth
                name="firstName"
                label="First Name"
                value={formData.firstName}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                required
                fullWidth
                name="lastName"
                label="Last Name"
                value={formData.lastName}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                required
                fullWidth
                name="email"
                label="Email"
                type="email"
                value={formData.email}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={6}>
              <FormControl fullWidth required>
                <InputLabel>Role</InputLabel>
                <Select
                  name="userRole"
                  value={formData.userRole}
                  onChange={handleChange}
                  label="Role"
                >
                  <MenuItem value="STUDENT">Student</MenuItem>
                  <MenuItem value="TUTOR">Tutor</MenuItem>
                  <MenuItem value="ADMIN">Admin</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Birth Date"
                  value={formData.birthDate}
                  onChange={handleDateChange}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                    },
                  }}
                />
              </LocalizationProvider>
            </Grid>
            {formData.userRole === 'STUDENT' && (
              <>
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Education Level</InputLabel>
                    <Select
                      name="educationLevel"
                      value={formData.educationLevel}
                      onChange={handleChange}
                      label="Education Level"
                    >
                      <MenuItem value="BEGINNER">Beginner</MenuItem>
                      <MenuItem value="INTERMEDIATE">Intermediate</MenuItem>
                      <MenuItem value="ADVANCED">Advanced</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    required
                    name="cin"
                    label="CIN (Carte d'Identité Nationale)"
                    value={formData.cin || ''}
                    onChange={handleChange}
                    inputProps={{ maxLength: 8 }}
                    helperText="Numéro d'identité nationale de l'étudiant"
                  />
                </Grid>
                <Grid item xs={6}>
                  <FormControl fullWidth>
                    <InputLabel>Class</InputLabel>
                    <Select
                      name="classe"
                      value={formData.classe || ''}
                      onChange={handleChange}
                      label="Class"
                    >
                      <MenuItem value="">Not Assigned</MenuItem>
                      {classes.map(classItem => (
                        <MenuItem key={classItem._id} value={classItem._id}>
                          {classItem.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </>
            )}
            <Grid item xs={12}>
              <TextField
                fullWidth
                name="department"
                label="Department"
                value={formData.department}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={formData.accountStatus}
                    onChange={handleChange}
                    name="accountStatus"
                  />
                }
                label="Account Active"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button type="submit" variant="contained" color="primary">
            Save Changes
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

UserEditDialog.propTypes = {
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  user: PropTypes.shape({
    _id: PropTypes.string,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    email: PropTypes.string,
    userRole: PropTypes.string,
    accountStatus: PropTypes.bool,
    birthDate: PropTypes.string,
    educationLevel: PropTypes.string,
    department: PropTypes.string,
    cin: PropTypes.string,
    classe: PropTypes.any
  })
};

export default UserEditDialog;
================================================================================
FILE: src\components\dialogs\UserFormDialog.jsx
================================================================================

// src/components/dialogs/UserFormDialog.jsx
import { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Switch,
  FormControlLabel
} from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { fetchClasses } from '../../api/classApi';

const UserFormDialog = ({ open, onClose, user, onSubmit, mode = 'create' }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    userRole: 'STUDENT',
    accountStatus: true,
    birthDate: null,
    educationLevel: 'BEGINNER',
    department: '',
    cin: '',
    classe: null
  });
  const [classes, setClasses] = useState([]);

  useEffect(() => {
    if (user && mode === 'edit') {
      setFormData({
        ...user,
        password: '',
        classe: user.classe?._id || null
      });
    }
  }, [user, mode]);

  useEffect(() => {
    const fetchAllClasses = async () => {
      try {
        const data = await fetchClasses();
        setClasses(data);
      } catch (err) {
        console.error('Error fetching classes:', err);
      }
    };
    fetchAllClasses();
  }, []);

  const handleChange = (event) => {
    const { name, value, checked } = event.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'accountStatus' ? checked : value
    }));
  };

  const handleDateChange = (date) => {
    setFormData(prev => ({
      ...prev,
      birthDate: date
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {mode === 'create' ? 'Add New User' : 'Edit User'}
      </DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent>
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <TextField
                required
                fullWidth
                name="firstName"
                label="First Name"
                value={formData.firstName}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                required
                fullWidth
                name="lastName"
                label="Last Name"
                value={formData.lastName}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                required
                fullWidth
                name="email"
                label="Email"
                type="email"
                value={formData.email}
                onChange={handleChange}
              />
            </Grid>
            {mode === 'create' && (
              <Grid item xs={12}>
                <TextField
                  required
                  fullWidth
                  name="password"
                  label="Password"
                  type="password"
                  value={formData.password}
                  onChange={handleChange}
                />
              </Grid>
            )}
            <Grid item xs={6}>
              <FormControl fullWidth required>
                <InputLabel>Role</InputLabel>
                <Select
                  name="userRole"
                  value={formData.userRole}
                  onChange={handleChange}
                  label="Role"
                >
                  <MenuItem value="STUDENT">Student</MenuItem>
                  <MenuItem value="TUTOR">Tutor</MenuItem>
                  <MenuItem value="ADMIN">Admin</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Birth Date"
                  value={formData.birthDate}
                  onChange={handleDateChange}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                    },
                  }}
                />
              </LocalizationProvider>
            </Grid>
            {formData.userRole === 'STUDENT' && (
              <>
                <Grid item xs={12}>
                  <FormControl fullWidth required>
                    <InputLabel>Education Level</InputLabel>
                    <Select
                      name="educationLevel"
                      value={formData.educationLevel}
                      onChange={handleChange}
                      label="Education Level"
                    >
                      <MenuItem value="BEGINNER">Beginner</MenuItem>
                      <MenuItem value="INTERMEDIATE">Intermediate</MenuItem>
                      <MenuItem value="ADVANCED">Advanced</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    required
                    fullWidth
                    name="cin"
                    label="CIN (Carte d'Identité Nationale)"
                    value={formData.cin}
                    onChange={handleChange}
                    inputProps={{ maxLength: 8 }}
                    helperText="Numéro d'identité nationale (obligatoire pour les étudiants)"
                  />
                </Grid>
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel>Class</InputLabel>
                    <Select
                      name="classe"
                      value={formData.classe || ''}
                      onChange={handleChange}
                      label="Class"
                    >
                      <MenuItem value="">Not Assigned</MenuItem>
                      {classes.map(classItem => (
                        <MenuItem key={classItem._id} value={classItem._id}>
                          {classItem.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </>
            )}
            <Grid item xs={12}>
              <TextField
                fullWidth
                name="department"
                label="Department"
                value={formData.department}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={formData.accountStatus}
                    onChange={handleChange}
                    name="accountStatus"
                  />
                }
                label="Account Active"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={onClose}>Cancel</Button>
          <Button type="submit" variant="contained" color="primary">
            {mode === 'create' ? 'Add User' : 'Save Changes'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

UserFormDialog.propTypes = {
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  mode: PropTypes.oneOf(['create', 'edit']),
  user: PropTypes.shape({
    idUser: PropTypes.number,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    email: PropTypes.string,
    role: PropTypes.string,
    accountStatus: PropTypes.bool,
    birthDate: PropTypes.instanceOf(Date),
    educationLevel: PropTypes.string,
    department: PropTypes.string,
    classe: PropTypes.any
  })
};

UserFormDialog.defaultProps = {
  mode: 'create',
  user: null
};

export default UserFormDialog;
================================================================================
FILE: src\components\FaceLogin.jsx
================================================================================

import { useState, useEffect, useRef } from 'react';
import { Box, Button, Typography, Paper, CircularProgress } from '@mui/material';
import { styled } from '@mui/material/styles';

const StyledPaper = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2),
  margin: theme.spacing(2, 0),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
}));

const VideoContainer = styled(Box)(({ theme }) => ({
  position: 'relative',
  width: '100%',
  maxWidth: '500px',
  marginBottom: theme.spacing(2),
}));

const LoginButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(1, 0),
  backgroundColor: '#dd2825',
  '&:hover': {
    backgroundColor: '#c81e1a',
  },
}));

// Simplified face login component
const FaceLogin = ({ onLogin, onCancel }) => {
  const videoRef = useRef();
  const [isVideoReady, setIsVideoReady] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticating, setIsAuthenticating] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    startVideo();
    return () => {
      // Cleanup: stop camera when component unmounts
      if (videoRef.current && videoRef.current.srcObject) {
        const tracks = videoRef.current.srcObject.getTracks();
        tracks.forEach(track => track.stop());
      }
    };
  }, []);

  const startVideo = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: "user" }  // Prefer front camera
      });
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        setIsLoading(false);
      }
    } catch (error) {
      console.error('Error starting video:', error);
      setIsLoading(false);
      setError('Could not access camera. Please ensure camera permissions are enabled.');
    }
  };

  const handleVideoPlay = () => {
    setIsVideoReady(true);
  };

  const authenticateWithFace = async () => {
    if (!videoRef.current) return;
    
    try {
      setIsAuthenticating(true);
      setError('');
      
      // Capture the face image
      const canvas = document.createElement('canvas');
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      
      const ctx = canvas.getContext('2d');
      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);
      
      // Convert to blob
      const blob = await new Promise(resolve => {
        canvas.toBlob(resolve, 'image/jpeg');
      });
      
      // Create form data for upload
      const formData = new FormData();
      formData.append('faceImage', blob, 'face.jpg');
      
      // Send to server for authentication
      const response = await fetch('http://localhost:5001/api/face-detection/login', {
        method: 'POST',
        body: formData
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Face authentication failed');
      }
      
      // Authentication successful, call the login callback
      if (onLogin) {
        onLogin(data);
      }
    } catch (error) {
      console.error('Face authentication error:', error);
      setError(error.message || 'Face authentication failed');
    } finally {
      setIsAuthenticating(false);
    }
  };

  return (
    <StyledPaper elevation={3}>
      <Typography variant="h6" gutterBottom>
        Face Authentication
      </Typography>
      
      {error && (
        <Typography variant="body2" color="error" sx={{ mb: 2 }}>
          {error}
        </Typography>
      )}
      
      <VideoContainer>
        {isLoading && (
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '300px' }}>
            <CircularProgress />
          </Box>
        )}
        
        <video
          ref={videoRef}
          autoPlay
          muted
          onPlay={handleVideoPlay}
          style={{ width: '100%', display: isLoading ? 'none' : 'block', borderRadius: '8px' }}
        />
      </VideoContainer>
      
      <Typography 
        variant="body2" 
        color="info.main"
        sx={{ mb: 2 }}
      >
        Look directly at the camera to authenticate your face.
      </Typography>
      
      <Box sx={{ display: 'flex', gap: 2, width: '100%', justifyContent: 'center' }}>
        <Button
          variant="outlined"
          onClick={onCancel}
          disabled={isAuthenticating}
        >
          Cancel
        </Button>
        
        <LoginButton 
          variant="contained" 
          onClick={authenticateWithFace}
          disabled={!isVideoReady || isAuthenticating}
        >
          {isAuthenticating ? <CircularProgress size={24} color="inherit" /> : 'Login with Face'}
        </LoginButton>
      </Box>
    </StyledPaper>
  );
};

export default FaceLogin; 
================================================================================
FILE: src\components\KanbanBoard.jsx
================================================================================

import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { updateTaskStatus } from '../api/taskApi';

const statuses = ['TODO', 'IN_PROGRESS', 'COMPLETED'];

const KanbanBoard = ({ tasks }) => {
  const groupedTasks = statuses.reduce((acc, status) => {
    acc[status] = tasks?.filter(task => task.status === status) || [];
    return acc;
  }, {});
  const onDragEnd = async (result) => {
    if (!result.destination) return;
    const { source, destination } = result;
    if (source.droppableId === destination.droppableId && source.index === destination.index) return;
    const taskId = result.draggableId;
    const newStatus = destination.droppableId;
    try {
      await updateTaskStatus(taskId, newStatus);
      // Optionally, update local state or re-fetch tasks
    } catch (error) {
      console.error('Error updating task status:', error);
    }
  };

  return (
    <DragDropContext onDragEnd={onDragEnd}>
      {statuses.map(status => (
        <Droppable key={status} droppableId={status}>
          {(provided) => (
            <div ref={provided.innerRef} {...provided.droppableProps} style={{ margin: '10px' }}>
              <h2>{status}</h2>
              {groupedTasks[status].map((task, index) => (
                <Draggable key={task._id} draggableId={task._id} index={index}>
                  {(provided) => (
                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} style={{ padding: '10px', margin: '5px 0', border: '1px solid #ccc' }}>
                      {task.title}
                    </div>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      ))}
    </DragDropContext>
  );
};

export default KanbanBoard;
================================================================================
FILE: src\components\layout\DashboardLayout.jsx
================================================================================


// src/components/layout/DashboardLayout.jsx
import { useState, useEffect } from 'react';
import { Box, Toolbar, Typography } from '@mui/material';
import Sidebar from './Sidebar';
import { Outlet } from 'react-router-dom';

const DashboardLayout = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) return;

        const response = await fetch('http://localhost:5001/api/users/profile', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          setUser(data);
          
          // Rediriger si l'utilisateur n'est pas un admin
          if (data.userRole !== 'ADMIN') {
            if (data.userRole === 'STUDENT') {
              window.location.replace('/student');
            } else if (data.userRole === 'TUTOR') {
              window.location.replace('/tutor');
            }
          }
        }
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, []);

  const updateUser = (newUserData) => {
    setUser(newUserData);
  };

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh' }}> {/* Ensure full height layout */}
      <Sidebar user={user} />

      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 4,
          minHeight: '100vh', /* Match sidebar height */
          bgcolor: 'background.default',
          overflow: 'auto', /* Prevent content overflow */
          position: 'relative'
        }}
      >
        <Toolbar sx={{ minHeight: '14px' }} /> {/* Ensure spacing for AppBar */}
        {user && (
          <Box sx={{ 
            position: 'absolute', 
            top: 20, 
            right: 20,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'flex-end',
            gap: 0.5
          }}>
            <Typography variant="subtitle1" sx={{ color: '#dd2825', fontWeight: 'bold' }}>
              Welcome, {user.firstName} {user.lastName}
            </Typography>
          </Box>
        )}
        <Outlet context={{ user, updateUser }} />
      </Box>
    </Box>
  );
};

export default DashboardLayout;
================================================================================
FILE: src\components\layout\Sidebar.css
================================================================================

/* Sidebar.css */
.sidebar {
  width: 240px;
  height: 100vh;
  background-color: #dd2825 !important; /* Ensure it overrides MUI styles */
  color: white;
}

.sidebar .MuiDrawer-paper {
  background-color: #dd2825 !important; /* Override MUI drawer paper background */
}

.sidebar-logo {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
}

.sidebar-logo img {
  height: 50px;
  object-fit: contain;
}

.sidebar .MuiListItemButton-root {
  color: white;
}

.sidebar .MuiListItemButton-root:hover {
  background-color: rgb(253, 0, 0);
}

================================================================================
FILE: src\components\layout\Sidebar.jsx
================================================================================

// src/components/layout/Sidebar.jsx
import {
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemButton,
  Toolbar,
  Box,
  Divider,
  Typography,
  Avatar
} from '@mui/material';
import {
  People as PeopleIcon,
  Person as PersonIcon,
  School as SchoolIcon,
  Assignment as AssignmentIcon,
  ExitToApp as ExitToAppIcon,
  AccountCircle as AccountCircleIcon,
  Class as ClassIcon
} from '@mui/icons-material';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import './Sidebar.css';

const drawerWidth = 240;

const Sidebar = ({ user }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    {
      text: 'Profile',
      icon: <AccountCircleIcon style={{ color: 'white' }} />,
      path: '/admin/profile'
    },
    {
      text: 'Users Management',
      icon: <PeopleIcon style={{ color: 'white' }} />,
      path: '/admin/users',
      subItems: [
        { text: 'All Users', icon: <PersonIcon style={{ color: 'white' }} />, path: '/admin/users' },
        { text: 'Students', icon: <SchoolIcon style={{ color: 'white' }} />, path: '/admin/users/students' },
        { text: 'Tutors', icon: <PersonIcon style={{ color: 'white' }} />, path: '/admin/users/tutors' }
      ]
    },
    {
      text: 'Classes Management',
      icon: <ClassIcon style={{ color: 'white' }} />,
      path: '/admin/classes'
    },
    {
      text: 'Projects',
      icon: <AssignmentIcon style={{ color: 'white' }} />,
      path: '/admin/projects'
    },
    {
      text: 'Assign Task',
      icon: <AssignmentIcon style={{ color: 'white' }} />,
      path: '/admin/submit-task'      
    }
  ];

  const handleLogout = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.replace('/signin');
        return;
      }

      await axios.post('http://localhost:5001/api/auth/logout', {}, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      localStorage.clear();
      sessionStorage.clear();
      window.location.replace('/signin');
    } catch (error) {
      console.error('Logout error:', error);
      localStorage.clear();
      sessionStorage.clear();
      window.location.replace('/signin');
    }
  };

  return (
    <Drawer
      variant="permanent"
      className="sidebar"
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        '& .MuiDrawer-paper': {
          width: drawerWidth,
          boxSizing: 'border-box',
          bgcolor: 'background.paper'
        },
      }}
    >
      <Toolbar sx={{ minHeight: '100px' }}>
        <Box
          component="div"
          sx={{
            flexGrow: 1,
            display: 'flex',
            alignItems: 'center'
          }}
        >
          <img 
            src="/Lab2.png" 
            alt="Logo"
            style={{ height: '80px', objectFit: 'contain' }}
          /> 
        </Box>
      </Toolbar>

      <Divider />
      
      {user && (
        <Box sx={{ p: 2, textAlign: 'center' }}>
          <Avatar 
            src={user.profilePicture || user.faceImage ? `http://localhost:5001${user.profilePicture || user.faceImage}` : null} 
            sx={{ 
              width: 80, 
              height: 80, 
              margin: '0 auto 1rem',
              bgcolor: '#dd2825'
            }}
          >
            {(!user.profilePicture && !user.faceImage) && user.firstName?.charAt(0)}
          </Avatar>
          <Typography variant="subtitle1" sx={{ color: 'white', fontWeight: 'bold' }}>
            {user.firstName} {user.lastName}
          </Typography>
        </Box>
      )}

      <Divider />
      
      <List>
        {menuItems.map((item) => (
          <Box key={item.text}>
            <ListItem disablePadding>
              <ListItemButton
                selected={location.pathname === item.path}
                onClick={() => navigate(item.path)}
              >
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItemButton>
            </ListItem>
            {item.subItems && (
              <List component="div" disablePadding>
                {item.subItems.map((subItem) => (
                  <ListItemButton
                    key={subItem.text}
                    sx={{ pl: 4 }}
                    selected={location.pathname === subItem.path}
                    onClick={() => navigate(subItem.path)}
                  >
                    <ListItemIcon>{subItem.icon}</ListItemIcon>
                    <ListItemText primary={subItem.text} />
                  </ListItemButton>
                ))}
              </List>
            )}
          </Box>
        ))}
        <ListItem disablePadding>
          <ListItemButton onClick={handleLogout}>
            <ListItemIcon>
              <ExitToAppIcon style={{ color: 'white' }} />
            </ListItemIcon>
            <ListItemText primary="Logout" />
          </ListItemButton>
        </ListItem>
      </List>
    </Drawer>
  );
};

export default Sidebar;
================================================================================
FILE: src\components\layout\StudentDashboardLayout.jsx
================================================================================

import { useState, useEffect } from 'react';
import { Box, Toolbar, Typography } from '@mui/material';
import StudentSidebar from './StudentSidebar';
import { Outlet } from 'react-router-dom';

const StudentDashboardLayout = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) return;

        const response = await fetch('http://localhost:5001/api/users/profile', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          setUser(data);
          
          // Rediriger si l'utilisateur n'est pas un étudiant
          if (data.userRole !== 'STUDENT') {
            if (data.userRole === 'ADMIN') {
              window.location.replace('/admin');
            } else if (data.userRole === 'TUTOR') {
              window.location.replace('/tutor');
            }
          }
        }
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, []);

  const updateUser = (newUserData) => {
    setUser(newUserData);
  };

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh' }}>
      <StudentSidebar user={user} />

      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 4,
          minHeight: '100vh',
          bgcolor: 'background.default',
          overflow: 'auto',
          position: 'relative'
        }}
      >
        <Toolbar sx={{ minHeight: '14px' }} />
        {user && (
          <Box sx={{ 
            position: 'absolute', 
            top: 20, 
            right: 20,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'flex-end',
            gap: 0.5
          }}>
            <Typography variant="subtitle1" sx={{ color: '#dd2825', fontWeight: 'bold' }}>
              Welcome, {user.firstName} {user.lastName}
            </Typography>
          </Box>
        )}
        <Outlet context={{ user, updateUser }} />
      </Box>
    </Box>
  );
};

export default StudentDashboardLayout; 
================================================================================
FILE: src\components\layout\StudentSidebar.jsx
================================================================================

import {
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemButton,
  Toolbar,
  Box,
  Divider,
  Typography,
  Avatar
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  Assignment as AssignmentIcon,
  Group as GroupIcon,
  ExitToApp as ExitToAppIcon,
  AccountCircle as AccountCircleIcon,
  Task as TaskIcon
} from '@mui/icons-material';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import './Sidebar.css'; // Réutilisation du même style

const drawerWidth = 240;

const StudentSidebar = ({ user }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    {
      text: 'Dashboard',
      icon: <DashboardIcon style={{ color: 'white' }} />,
      path: '/student'
    },
    {
      text: 'Profile',
      icon: <AccountCircleIcon style={{ color: 'white' }} />,
      path: '/student/profile'
    },
    {
      text: 'Projects',
      icon: <AssignmentIcon style={{ color: 'white' }} />,
      path: '/student/projects'
    },
    {
      text: 'My Tasks',
      icon: <TaskIcon style={{ color: 'white' }} />,
      path: '/student/tasks'
    },
    {
      text: 'My Team',
      icon: <GroupIcon style={{ color: 'white' }} />,
      path: '/student/team'
    }
  ];

  const handleLogout = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.replace('/signin');
        return;
      }

      await axios.post('http://localhost:5001/api/auth/logout', {}, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      // Clear all storage
      localStorage.clear();
      sessionStorage.clear();
      
      // Force a complete page reload and redirect
      window.location.replace('/signin');
      
    } catch (error) {
      console.error('Logout error:', error);
      localStorage.clear();
      sessionStorage.clear();
      window.location.replace('/signin');
    }
  };

  return (
    <Drawer
      variant="permanent"
      className="sidebar"
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        '& .MuiDrawer-paper': {
          width: drawerWidth,
          boxSizing: 'border-box',
          bgcolor: 'background.paper'
        },
      }}
    >
      <Toolbar sx={{ minHeight: '100px' }}>
        <Box
          component="div"
          sx={{
            flexGrow: 1,
            display: 'flex',
            alignItems: 'center'
          }}
        >
          <img 
            src="/Lab2.png" 
            alt="Logo"
            style={{ height: '80px', objectFit: 'contain' }}
          /> 
        </Box>
      </Toolbar>

      <Divider />
      
      {user && (
        <Box sx={{ p: 2, textAlign: 'center' }}>
          <Avatar 
            src={user.profilePicture || user.faceImage ? `http://localhost:5001${user.profilePicture || user.faceImage}` : null} 
            sx={{ 
              width: 80, 
              height: 80, 
              margin: '0 auto 1rem',
              bgcolor: '#dd2825'
            }}
          >
            {(!user.profilePicture && !user.faceImage) && user.firstName?.charAt(0)}
          </Avatar>
          <Typography variant="subtitle1" sx={{ color: 'white', fontWeight: 'bold' }}>
            {user.firstName} {user.lastName}
          </Typography>
          <Typography variant="caption" sx={{ color: 'white' }}>
            Student
          </Typography>
        </Box>
      )}

      <Divider />
      
      <List>
        {menuItems.map((item) => (
          <Box key={item.text}>
            <ListItem disablePadding>
              <ListItemButton
                selected={location.pathname === item.path}
                onClick={() => navigate(item.path)}
              >
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItemButton>
            </ListItem>
          </Box>
        ))}
        <ListItem disablePadding>
          <ListItemButton onClick={handleLogout}>
            <ListItemIcon>
              <ExitToAppIcon style={{ color: 'white' }} />
            </ListItemIcon>
            <ListItemText primary="Logout" />
          </ListItemButton>
        </ListItem>
      </List>
    </Drawer>
  );
};

export default StudentSidebar; 
================================================================================
FILE: src\components\layout\TutorDashboardLayout.jsx
================================================================================

// src/components/layout/TutorDashboardLayout.jsx
import { useState, useEffect } from 'react';
import { Box, Toolbar, Typography } from '@mui/material';
import TutorSidebar from './TutorSidebar';
import { Outlet } from 'react-router-dom';

const TutorDashboardLayout = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) return;

        const response = await fetch('http://localhost:5001/api/users/profile', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          setUser(data);
          
          if (data.userRole !== 'TUTOR') {
            if (data.userRole === 'ADMIN') {
              window.location.replace('/admin');
            } else if (data.userRole === 'STUDENT') {
              window.location.replace('/student');
            }
          }
        }
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, []);

  const updateUser = (newUserData) => {
    setUser(newUserData);
  };

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh' }}>
      <TutorSidebar user={user} />

      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 4,
          minHeight: '100vh',
          bgcolor: 'background.default',
          overflow: 'auto',
          position: 'relative'
        }}
      >
        <Toolbar sx={{ minHeight: '14px' }} />
        {user && (
          <Box sx={{ 
            position: 'absolute', 
            top: 20, 
            right: 20,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'flex-end',
            gap: 0.5
          }}>
            <Typography variant="subtitle1" sx={{ color: '#dd2825', fontWeight: 'bold' }}>
              Welcome, {user.firstName} {user.lastName}
            </Typography>
          </Box>
        )}
        <Outlet context={{ user, updateUser }} />
      </Box>
    </Box>
  );
};

export default TutorDashboardLayout;
================================================================================
FILE: src\components\layout\TutorSidebar.jsx
================================================================================

// src/components/layout/TutorSidebar.jsx
import {
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemButton,
  Toolbar,
  Box,
  Divider,
  Typography,
  Avatar
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  Assignment as AssignmentIcon,
  Group as GroupIcon,
  ExitToApp as ExitToAppIcon,
  AccountCircle as AccountCircleIcon,
  Task as TaskIcon,
  Class as ClassIcon,
  People as PeopleIcon
} from '@mui/icons-material';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import './Sidebar.css';

const drawerWidth = 240;

const TutorSidebar = ({ user }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    {
      text: 'Dashboard',
      icon: <DashboardIcon style={{ color: 'white' }} />,
      path: '/tutor'
    },
    {
      text: 'Profile',
      icon: <AccountCircleIcon style={{ color: 'white' }} />,
      path: '/tutor/profile'
    },
    {
      text: 'Classes',
      icon: <ClassIcon style={{ color: 'white' }} />, // Using ClassIcon for Classes
      path: '/tutor/classes'
    },
    {
      text: 'Students',
      icon: <PeopleIcon style={{ color: 'white' }} />, // Using PeopleIcon for Students
      path: '/tutor/students'
    },
    {
      text: 'Projects',
      icon: <TaskIcon style={{ color: 'white' }} />, // Using TaskIcon for Projects
      path: '/tutor/projects'
    },
    {
      text: 'Assignments',
      icon: <AssignmentIcon style={{ color: 'white' }} />, // Using AssignmentIcon for Assignments
      path: '/tutor/assignments' // Assuming a new route for managing assignments
    },
    {
      text: 'Groups',
      icon: <GroupIcon style={{ color: 'white' }} />, // Using GroupIcon for Groups
      path: '/tutor/groups' // Assuming a new route for managing groups
    }
  ];

  const handleLogout = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.replace('/signin');
        return;
      }

      await axios.post('http://localhost:5001/api/auth/logout', {}, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      localStorage.clear();
      sessionStorage.clear();
      window.location.replace('/signin');
    } catch (error) {
      console.error('Logout error:', error);
      localStorage.clear();
      sessionStorage.clear();
      window.location.replace('/signin');
    }
  };

  return (
    <Drawer
      variant="permanent"
      className="sidebar"
      sx={{
        width: drawerWidth,
        flexShrink: 0,
        '& .MuiDrawer-paper': {
          width: drawerWidth,
          boxSizing: 'border-box',
          bgcolor: 'background.paper'
        },
      }}
    >
      <Toolbar sx={{ minHeight: '100px' }}>
        <Box
          component="div"
          sx={{
            flexGrow: 1,
            display: 'flex',
            alignItems: 'center'
          }}
        >
          <img 
            src="/Lab2.png" 
            alt="Logo"
            style={{ height: '80px', objectFit: 'contain' }}
          /> 
        </Box>
      </Toolbar>

      <Divider />
      
      {user && (
        <Box sx={{ p: 2, textAlign: 'center' }}>
          <Avatar 
            src={user.profilePicture || user.faceImage ? `http://localhost:5001${user.profilePicture || user.faceImage}` : null} 
            sx={{ 
              width: 80, 
              height: 80, 
              margin: '0 auto 1rem',
              bgcolor: '#dd2825'
            }}
          >
            {(!user.profilePicture && !user.faceImage) && user.firstName?.charAt(0)}
          </Avatar>
          <Typography variant="subtitle1" sx={{ color: 'white', fontWeight: 'bold' }}>
            {user.firstName} {user.lastName}
          </Typography>
          <Typography variant="caption" sx={{ color: 'white' }}>
            Tutor
          </Typography>
        </Box>
      )}

      <Divider />
      
      <List>
        {menuItems.map((item) => (
          <Box key={item.text}>
            <ListItem disablePadding>
              <ListItemButton
                selected={location.pathname === item.path}
                onClick={() => navigate(item.path)}
              >
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItemButton>
            </ListItem>
          </Box>
        ))}
        <ListItem disablePadding>
          <ListItemButton onClick={handleLogout}>
            <ListItemIcon>
              <ExitToAppIcon style={{ color: 'white' }} />
            </ListItemIcon>
            <ListItemText primary="Logout" />
          </ListItemButton>
        </ListItem>
      </List>
    </Drawer>
  );
};

export default TutorSidebar;

 
================================================================================
FILE: src\pages\admin\ClassesManagement.jsx
================================================================================

// src/pages/admin/ClassesManagement.jsx
import { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  LinearProgress,
  Alert,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Chip,
  Autocomplete
} from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, GroupAdd as GroupAddIcon } from '@mui/icons-material';
import { fetchClasses, createClass, updateClass, deleteClass, addStudentsToClass } from '../../api/classApi';
import { fetchUsers } from '../../api/userApi';

const ClassesManagement = () => {
  const [classes, setClasses] = useState([]);
  const [tutors, setTutors] = useState([]);
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [openCreateDialog, setOpenCreateDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [openAddStudentsDialog, setOpenAddStudentsDialog] = useState(false);
  const [selectedClass, setSelectedClass] = useState(null);
  const [formData, setFormData] = useState({ name: '', description: '', tutorId: '' });
  const [selectedStudents, setSelectedStudents] = useState([]);

  useEffect(() => {
    fetchAllClasses();
    fetchTutorsAndStudents();
  }, []);

  const fetchAllClasses = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await fetchClasses();
      setClasses(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchTutorsAndStudents = async () => {
    try {
      const tutorsData = await fetchUsers('TUTOR');
      const studentsData = await fetchUsers('STUDENT');
      setTutors(tutorsData);
      setStudents(studentsData);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleOpenCreateDialog = () => {
    setFormData({ name: '', description: '', tutorId: '' });
    setOpenCreateDialog(true);
  };

  const handleCloseCreateDialog = () => {
    setOpenCreateDialog(false);
  };

  const handleOpenEditDialog = (classItem) => {
    setSelectedClass(classItem);
    setFormData({
      name: classItem.name,
      description: classItem.description || '',
      tutorId: classItem.tutor._id
    });
    setOpenEditDialog(true);
  };

  const handleCloseEditDialog = () => {
    setOpenEditDialog(false);
    setSelectedClass(null);
  };

  const handleOpenAddStudentsDialog = (classItem) => {
    setSelectedClass(classItem);
    setSelectedStudents([]);
    setOpenAddStudentsDialog(true);
  };

  const handleCloseAddStudentsDialog = () => {
    setOpenAddStudentsDialog(false);
    setSelectedClass(null);
  };

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleCreateClass = async (e) => {
    e.preventDefault();
    try {
      const newClass = await createClass(formData);
      setClasses([...classes, newClass]);
      handleCloseCreateDialog();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleUpdateClass = async (e) => {
    e.preventDefault();
    try {
      const updatedClass = await updateClass(selectedClass._id, formData);
      setClasses(classes.map(c => (c._id === selectedClass._id ? updatedClass : c)));
      handleCloseEditDialog();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleDeleteClass = async (classId) => {
    if (window.confirm('Are you sure you want to delete this class?')) {
      try {
        await deleteClass(classId);
        setClasses(classes.filter(c => c._id !== classId));
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const handleAddStudents = async () => {
    try {
      const studentIds = selectedStudents.map(student => student._id);
      const updatedClass = await addStudentsToClass(selectedClass._id, studentIds);
      setClasses(classes.map(c => (c._id === selectedClass._id ? updatedClass : c)));
      fetchAllClasses();

      handleCloseAddStudentsDialog();
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Classes Management
        </Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={handleOpenCreateDialog}
          sx={{
            backgroundColor: '#dd2825',
            color: 'white',
            '&:hover': { backgroundColor: '#c42020' }
          }}
        >
          Create Class
        </Button>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {loading ? (
        <LinearProgress />
      ) : classes.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6">No Classes Found</Typography>
          <Typography variant="body1" sx={{ mt: 1 }}>
            Create a new class to get started.
          </Typography>
        </Paper>
      ) : (
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
                <TableCell>Class Name</TableCell>
                <TableCell>Description</TableCell>
                <TableCell>Tutor</TableCell>
                <TableCell>Number of Students</TableCell>
                <TableCell>Created By</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {classes.map((classItem) => (
                <TableRow key={classItem._id} hover>
                  <TableCell>{classItem.name}</TableCell>
                  <TableCell>{classItem.description || 'No description'}</TableCell>
                  <TableCell>{classItem.tutor ? `${classItem.tutor.firstName} ${classItem.tutor.lastName}` : 'Not assigned'}</TableCell>
                  <TableCell>{classItem.students.length}</TableCell>
                  <TableCell>{classItem.createdBy ? `${classItem.createdBy.firstName} ${classItem.createdBy.lastName}` : 'Unknown'}</TableCell>
                  <TableCell align="right">
                    <Tooltip title="Edit Class">
                      <IconButton onClick={() => handleOpenEditDialog(classItem)} size="small">
                        <EditIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Add Students">
                      <IconButton onClick={() => handleOpenAddStudentsDialog(classItem)} size="small">
                        <GroupAddIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete Class">
                      <IconButton onClick={() => handleDeleteClass(classItem._id)} size="small" color="error">
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {/* Create Class Dialog */}
      <Dialog open={openCreateDialog} onClose={handleCloseCreateDialog} maxWidth="sm" fullWidth>
        <DialogTitle>Create New Class</DialogTitle>
        <form onSubmit={handleCreateClass}>
          <DialogContent>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  name="name"
                  label="Class Name"
                  value={formData.name}
                  onChange={handleFormChange}
                  fullWidth
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  name="description"
                  label="Description"
                  value={formData.description}
                  onChange={handleFormChange}
                  fullWidth
                  multiline
                  rows={3}
                />
              </Grid>
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Tutor</InputLabel>
                  <Select
                    name="tutorId"
                    value={formData.tutorId}
                    onChange={handleFormChange}
                    label="Tutor"
                  >
                    {tutors.map(tutor => (
                      <MenuItem key={tutor._id} value={tutor._id}>
                        {tutor.firstName} {tutor.lastName}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseCreateDialog}>Cancel</Button>
            <Button type="submit" variant="contained" sx={{ backgroundColor: '#dd2825', color: 'white' }}>
              Create
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      {/* Edit Class Dialog */}
      <Dialog open={openEditDialog} onClose={handleCloseEditDialog} maxWidth="sm" fullWidth>
        <DialogTitle>Edit Class</DialogTitle>
        <form onSubmit={handleUpdateClass}>
          <DialogContent>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  name="name"
                  label="Class Name"
                  value={formData.name}
                  onChange={handleFormChange}
                  fullWidth
                  required
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  name="description"
                  label="Description"
                  value={formData.description}
                  onChange={handleFormChange}
                  fullWidth
                  multiline
                  rows={3}
                />
              </Grid>
              <Grid item xs={12}>
                <FormControl fullWidth required>
                  <InputLabel>Tutor</InputLabel>
                  <Select
                    name="tutorId"
                    value={formData.tutorId}
                    onChange={handleFormChange}
                    label="Tutor"
                  >
                    {tutors.map(tutor => (
                      <MenuItem key={tutor._id} value={tutor._id}>
                        {tutor.firstName} {tutor.lastName}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseEditDialog}>Cancel</Button>
            <Button type="submit" variant="contained" sx={{ backgroundColor: '#dd2825', color: 'white' }}>
              Save Changes
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      {/* Add Students Dialog */}
      <Dialog open={openAddStudentsDialog} onClose={handleCloseAddStudentsDialog} maxWidth="md" fullWidth>
        <DialogTitle>Add Students to {selectedClass?.name}</DialogTitle>
        <DialogContent>
          <Autocomplete
            multiple
            options={students.filter(student => !selectedClass?.students.some(s => s._id === student._id))}
            getOptionLabel={(option) => `${option.firstName} ${option.lastName} (${option.email})`}
            value={selectedStudents}
            onChange={(event, newValue) => setSelectedStudents(newValue)}
            renderInput={(params) => (
              <TextField {...params} label="Select Students" placeholder="Search students..." />
            )}
            fullWidth
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseAddStudentsDialog}>Cancel</Button>
          <Button
            onClick={handleAddStudents}
            variant="contained"
            disabled={selectedStudents.length === 0}
            sx={{ backgroundColor: '#dd2825', color: 'white' }}
          >
            Add Students
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ClassesManagement;
================================================================================
FILE: src\pages\admin\Profile.jsx
================================================================================

import { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Avatar,
  Grid,
  Divider,
  List,
  ListItem,
  ListItemText,
  Button,
  Alert,
  CircularProgress
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { Person as PersonIcon } from '@mui/icons-material';
import EditProfileDialog from '../../components/dialogs/EditProfileDialog';
import { useNavigate, useOutletContext } from 'react-router-dom';

const StyledPaper = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  borderRadius: '16px',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const Profile = () => {
  const { user, updateUser } = useOutletContext();
  const [error, setError] = useState('');
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  const checkToken = () => {
    const token = localStorage.getItem('token');
    if (!token) {
      console.log('No token found, redirecting to signin');
      navigate('/signin');
      return null;
    }
    return token;
  };

  const fetchUserProfile = async () => {
    try {
      const token = checkToken();
      if (!token) return;

      console.log('Fetching profile with token:', token);

      const response = await fetch('http://localhost:5001/api/users/profile', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const data = await response.json();
        if (response.status === 401) {
          console.log('Token invalid, clearing and redirecting');
          localStorage.removeItem('token');
          navigate('/signin');
          return;
        }
        throw new Error(data.message || 'Failed to fetch profile');
      }

      const data = await response.json();
      console.log('Profile data received:', data);
      updateUser(data);
    } catch (err) {
      console.error('Profile fetch error:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const token = checkToken();
    if (token) {
      fetchUserProfile();
    }
  }, []);

  const handleEditClick = () => {
    setIsEditDialogOpen(true);
  };

  const handleEditClose = () => {
    setIsEditDialogOpen(false);
  };

  const handleProfileUpdate = (updatedUser) => {
    updateUser(updatedUser);
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  if (!user) {
    return <Alert severity="info">Loading profile...</Alert>;
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" sx={{ mb: 3 }}>Profile</Typography>
      
      <Grid container spacing={3}>
        {/* Left column - Profile Info */}
        <Grid item xs={12} md={4}>
          <StyledPaper>
            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 3 }}>
              {user.profilePicture || user.faceImage ? (
                <Avatar 
                  src={`http://localhost:5001${user.profilePicture || user.faceImage}`}
                  sx={{ width: 120, height: 120, mb: 2 }}
                />
              ) : (
                <Avatar 
                  sx={{ 
                    width: 120, 
                    height: 120, 
                    mb: 2, 
                    bgcolor: '#dd2825' 
                  }}
                >
                  {user.firstName?.charAt(0)}
                </Avatar>
              )}
              <Typography variant="h6">{`${user.firstName} ${user.lastName}`}</Typography>
              <Typography color="textSecondary">{user.userRole}</Typography>
            </Box>
            
            <Button 
              fullWidth 
              variant="contained" 
              onClick={handleEditClick}
              sx={{ 
                bgcolor: '#dd2825',
                '&:hover': { bgcolor: 'rgba(221, 40, 37, 0.9)' },
                color: 'white'
              }}
            >
              Edit Profile
            </Button>
          </StyledPaper>
        </Grid>

        {/* Right column - Detailed Info */}
        <Grid item xs={12} md={8}>
          <StyledPaper>
            <Typography variant="h6" sx={{ mb: 2 }}>Profile Details</Typography>
            <Divider sx={{ mb: 2 }} />
            
            <List>
              <ListItem>
                <ListItemText 
                  primary="First Name" 
                  secondary={user.firstName} 
                  primaryTypographyProps={{ color: 'textSecondary' }}
                />
              </ListItem>
              <Divider />

              <ListItem>
                <ListItemText 
                  primary="Last Name" 
                  secondary={user.lastName} 
                  primaryTypographyProps={{ color: 'textSecondary' }}
                />
              </ListItem>
              <Divider />

              <ListItem>
                <ListItemText 
                  primary="Email" 
                  secondary={user.email} 
                  primaryTypographyProps={{ color: 'textSecondary' }}
                />
              </ListItem>
              <Divider />

              {user.userRole === 'STUDENT' && (
                <>
                  <ListItem>
                    <ListItemText 
                      primary="CIN" 
                      secondary={user.cin || 'Non renseigné'} 
                      primaryTypographyProps={{ color: 'textSecondary' }}
                    />
                  </ListItem>
                  <Divider />
                  
                  <ListItem>
                    <ListItemText 
                      primary="Classe" 
                      secondary={user.classe || '--'} 
                      primaryTypographyProps={{ color: 'textSecondary' }}
                    />
                  </ListItem>
                  <Divider />
                </>
              )}

              <ListItem>
                <ListItemText 
                  primary="Role" 
                  secondary={user.userRole} 
                  primaryTypographyProps={{ color: 'textSecondary' }}
                />
              </ListItem>
              <Divider />
              
              {user.userRole === 'STUDENT' && (
                <>
                  <ListItem>
                    <ListItemText 
                      primary="Education Level" 
                      secondary={user.educationLevel || 'Beginner'} 
                      primaryTypographyProps={{ color: 'textSecondary' }}
                    />
                  </ListItem>
                  <Divider />
                </>
              )}
              
              <ListItem>
                <ListItemText 
                  primary="Account Status" 
                  secondary={user.accountStatus ? 'Active' : 'Inactive'} 
                  primaryTypographyProps={{ color: 'textSecondary' }}
                />
              </ListItem>
            </List>
          </StyledPaper>
        </Grid>
      </Grid>

      <EditProfileDialog 
        open={isEditDialogOpen}
        onClose={handleEditClose}
        user={user}
        onUpdate={handleProfileUpdate}
      />
    </Box>
  );
};

export default Profile; 
================================================================================
FILE: src\pages\admin\SubmitTask.jsx
================================================================================

// src/pages/admin/SubmitTask.jsx
import React, { useState } from 'react';
import { Box, Typography, TextField, Button, Alert, Container, Paper, Grid, Divider, Link } from '@mui/material';
import { styled } from '@mui/material/styles';
import { useNavigate } from 'react-router-dom';

const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const SubmitTask = () => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    dueDate: '',
    assigned: '', 
    projectRef: '', 
    milestoneRef: '', 
  });

  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });
      if (!response.ok) {
        throw new Error('Failed to create task');
      }
      const data = await response.json();
      console.log('Task created:', data);
      navigate('/admin/users'); // Redirect after successful submission
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <Container component="main" maxWidth="md">
      <StyledPaper elevation={6}>
        <Typography variant="h4" gutterBottom>
          Assign Task
        </Typography>
        {error && <Alert severity="error">{error}</Alert>}
        <form onSubmit={handleSubmit} style={{ width: '100%' }}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                label="Assigned To"
                name="assigned"
                value={formData.assigned}
                onChange={handleChange}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                fullWidth
                multiline
                rows={4}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                type="date"
                label="Due Date"
                name="dueDate"
                value={formData.dueDate}
                onChange={handleChange}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Project Reference"
                name="projectRef"
                value={formData.projectRef}
                onChange={handleChange}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Milestone Reference"
                name="milestoneRef"
                value={formData.milestoneRef}
                onChange={handleChange}
                fullWidth
                required
              />
            </Grid>
            <Grid item xs={12}>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                sx={{
                  backgroundColor: '#dd2825',
                  '&:hover': {
                    backgroundColor: '#8b74f2',
                  },
                  color: 'white',
                  mt: 2,
                }}
              >
                Submit Task
              </Button>
            </Grid>
          </Grid>
        </form>
        <Divider sx={{ my: 2 }} />
 
      </StyledPaper>
    </Container>
  );
};

export default SubmitTask;
================================================================================
FILE: src\pages\admin\UsersList.jsx
================================================================================

// src/pages/admin/UsersList.jsx
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation, useNavigate } from 'react-router-dom';
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Button,
  Chip,
  Box,
  Typography,
  LinearProgress,
  Alert,
  Snackbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as VisibilityIcon,
  Add as AddIcon
} from '@mui/icons-material';
import { fetchUsers, deleteUser, updateUser, createUser } from '../../api/userApi';
import DeleteConfirmDialog from '../../components/dialogs/DeleteConfirmDialog';
import UserDetailsDialog from '../../components/dialogs/UserDetailsDialog';
import UserFormDialog from '../../components/dialogs/UserFormDialog';
import UserEditDialog from '../../components/dialogs/UserEditDialog';

const UsersList = () => {
  // State management
  const [selectedUser, setSelectedUser] = useState(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);
  const [formDialogOpen, setFormDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [classDialogOpen, setClassDialogOpen] = useState(false);
  const [newClass, setNewClass] = useState('');
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  const queryClient = useQueryClient();
  const navigate = useNavigate();
  const location = useLocation();

  // Get current role based on route
  const getRole = () => {
    if (location.pathname.includes('/students')) return 'STUDENT';
    if (location.pathname.includes('/tutors')) return 'TUTOR';
    return null;
  };

  // Queries and Mutations
  const { data: users = [], isLoading, error } = useQuery({
    queryKey: ['users', getRole()],
    queryFn: () => fetchUsers(getRole())
  });

  const deleteMutation = useMutation({
    mutationFn: deleteUser,
    onSuccess: () => {
      queryClient.invalidateQueries(['users']);
      setDeleteDialogOpen(false);
      showSnackbar('User deleted successfully', 'success');
    },
    onError: () => {
      showSnackbar('Failed to delete user', 'error');
    }
  });

  const updateMutation = useMutation({
    mutationFn: updateUser,
    onSuccess: () => {
      queryClient.invalidateQueries(['users']);
      setEditDialogOpen(false);
      showSnackbar('User updated successfully', 'success');
    },
    onError: () => {
      showSnackbar('Failed to update user', 'error');
    }
  });

  const createMutation = useMutation({
    mutationFn: createUser,
    onSuccess: () => {
      queryClient.invalidateQueries(['users']);
      setFormDialogOpen(false);
      showSnackbar('User created successfully', 'success');
    },
    onError: () => {
      showSnackbar('Failed to create user', 'error');
    }
  });

  // Mutation pour assigner une classe
  const assignClassMutation = useMutation({
    mutationFn: updateUser,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
      setSnackbar({
        open: true,
        message: 'Classe assignée avec succès',
        severity: 'success'
      });
      setClassDialogOpen(false);
    },
    onError: (error) => {
      console.error('Erreur lors de l\'assignation de classe:', error);
      setSnackbar({
        open: true,
        message: `Erreur: ${error.message || 'Échec de l\'assignation de classe'}`,
        severity: 'error'
      });
    }
  });

  // Helper Functions
  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity,
    });
  };

  const getRoleChipColor = (role) => {
    if (!role) return 'default';
    const upperRole = role.toUpperCase();
    switch (upperRole) {
      case 'ADMIN': return 'error';
      case 'TUTOR': return 'warning';
      case 'STUDENT': return 'primary';
      default: return 'default';
    }
  };

  // Handler Functions
  const handleEdit = (user) => {
    setSelectedUser(user);
    setEditDialogOpen(true);
  };

  const handleDelete = (user) => {
    setSelectedUser(user);
    setDeleteDialogOpen(true);
  };

  const handleViewDetails = (user) => {
    setSelectedUser(user);
    setDetailsDialogOpen(true);
  };

  const handleAddNew = () => {
    setFormDialogOpen(true);
  };

  const handleFormSubmit = (formData) => {
    createMutation.mutate(formData);
  };

  const handleEditSubmit = (formData) => {
    // Assurez-vous que l'ID est correctement passé
    const updateData = {
      ...formData,
      _id: formData._id // Utilisez _id de MongoDB
    };
    
    // Supprimez les champs non nécessaires ou invalides
    delete updateData.createdAt;
    delete updateData.updatedAt;
    delete updateData.__v;
    
    console.log('Updating user with data:', updateData);
    updateMutation.mutate(updateData);
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleQuickClassAssign = (user) => {
    setSelectedUser(user);
    setNewClass(user.classe === '--' ? '' : user.classe);
    setClassDialogOpen(true);
  };

  const handleClassAssignSubmit = () => {
    if (selectedUser) {
      // Envoi uniquement des champs nécessaires pour éviter tout conflit
      assignClassMutation.mutate({
        _id: selectedUser._id,
        classe: newClass || '--'
      });
    }
  };

  if (isLoading) return <LinearProgress />;

  return (
    <Box>
      {/* Header avec navigation */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h5" sx={{ mb: 1 }}>
            {getRole() ? `${getRole().charAt(0) + getRole().slice(1).toLowerCase()}s Management` : 'All Users'}
          </Typography>
          <Box sx={{ display: 'flex', gap: 1 }}>
  <Button
    size="small"
    variant={!getRole() ? 'contained' : 'outlined'}
    onClick={() => navigate('/admin/users')}
    sx={{
      backgroundColor: !getRole() ? '#dd2825 !important' : 'transparent',
      color: !getRole() ? 'white' : '#dd2825 !important',
      borderColor: '#dd2825 !important',
      '&:hover': {
        backgroundColor: !getRole() ? '#C42050' : 'rgba(221, 37, 88, 0.04)',
        borderColor: '#DD2558'
      }
    }}
  >
    All Users
  </Button>
  <Button
    size="small"
    variant={getRole() === 'STUDENT' ? 'contained' : 'outlined'}
    onClick={() => navigate('/admin/users/students')}
    sx={{
      backgroundColor: getRole() === 'STUDENT' ? '#dd2825 !important' : 'transparent',
      color: getRole() === 'STUDENT' ? 'white' : '#dd2825 !important',
      borderColor: '#dd2825 !important',
      '&:hover': {
        backgroundColor: getRole() === 'STUDENT' ? '#C42050' : 'rgba(221, 37, 88, 0.04)',
        borderColor: '#DD2558'
      }
    }}
  >
    Students
  </Button>
  <Button
    size="small"
    variant={getRole() === 'TUTOR' ? 'contained' : 'outlined'}
    onClick={() => navigate('/admin/users/tutors')}
    sx={{
      backgroundColor: getRole() === 'TUTOR' ? '#dd2825 !important' : 'transparent',
      color: getRole() === 'TUTOR' ? 'white' : '#dd2825 !important',
      borderColor: '#dd2825 !important',
      '&:hover': {
        backgroundColor: getRole() === 'TUTOR' ? '#C42050' : 'rgba(221, 37, 88, 0.04)',
        borderColor: '#DD2558'
      }
    }}
  >
    Tutors
  </Button>
</Box>
        </Box>
        <Button
  variant="contained"
  startIcon={<AddIcon />}
  onClick={handleAddNew}
  sx={{
    backgroundColor: '#dd2825 !important',
    color: 'white',
    '&:hover': {
      backgroundColor: '#A4A4A4'  // slightly darker shade for hover
    }
  }}
>
  Add New User
</Button>
      </Box>

      {/* Afficher un message si aucun utilisateur */}
      {users.length === 0 ? (
        <Paper sx={{ p: 3, textAlign: 'center' }}>
          <Typography color="textSecondary">
            No {getRole()?.toLowerCase() || 'users'} found
          </Typography>
        </Paper>
      ) : (
        /* Table existante */
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Email</TableCell>
                {getRole() === 'STUDENT' && (
                  <>
                    <TableCell>CIN</TableCell>
                    <TableCell>Classe</TableCell>
                  </>
                )}
                <TableCell>Role</TableCell>
                <TableCell>Status</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.map((user) => (
                <TableRow key={user.idUser}>
                  <TableCell>
                    {user.firstName} {user.lastName}
                  </TableCell>
                  <TableCell>{user.email}</TableCell>
                  {getRole() === 'STUDENT' && (
                    <>
                      <TableCell>{user.cin || 'Non renseigné'}</TableCell>
                      <TableCell>
                        {user.classe === '--' ? (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Chip label="Non affecté" size="small" color="warning" />
                            <IconButton
                              size="small"
                              title="Assigner une classe"
                              onClick={() => handleQuickClassAssign(user)}
                            >
                              <EditIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        ) : (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            {user.classe}
                            <IconButton
                              size="small"
                              title="Modifier la classe"
                              onClick={() => handleQuickClassAssign(user)}
                            >
                              <EditIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        )}
                      </TableCell>
                    </>
                  )}
                  <TableCell>
                    <Chip 
                      label={user.userRole || user.role || 'N/A'} 
                      color={getRoleChipColor(user.userRole || user.role)}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>
                    <Chip 
                      label={user.accountStatus ? 'Active' : 'Inactive'}
                      color={user.accountStatus ? 'success' : 'error'}
                      size="small"
                    />
                  </TableCell>
                  <TableCell align="right">
                    <IconButton 
                      onClick={() => handleViewDetails(user)} 
                      size="small"
                      title="View Details"
                    >
                      <VisibilityIcon />
                    </IconButton>
                    <IconButton 
                      onClick={() => handleEdit(user)} 
                      size="small"
                      title="Edit User"
                    >
                      <EditIcon />
                    </IconButton>
                    <IconButton 
                      onClick={() => handleDelete(user)} 
                      size="small"
                      title="Delete User"
                    >
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {/* Dialogs */}
      <DeleteConfirmDialog
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onConfirm={() => deleteMutation.mutate(selectedUser._id)}
        userName={selectedUser ? `${selectedUser.firstName} ${selectedUser.lastName}` : ''}
      />

      <UserDetailsDialog
        open={detailsDialogOpen}
        onClose={() => setDetailsDialogOpen(false)}
        user={selectedUser}
      />

      <UserFormDialog
        open={formDialogOpen}
        onClose={() => setFormDialogOpen(false)}
        onSubmit={handleFormSubmit}
        mode="create"
      />

      <UserEditDialog
        open={editDialogOpen}
        onClose={() => setEditDialogOpen(false)}
        onSubmit={handleEditSubmit}
        user={selectedUser}
      />

      {/* Boîte de dialogue pour assigner une classe */}
      <Dialog open={classDialogOpen} onClose={() => setClassDialogOpen(false)}>
        <DialogTitle>
          {selectedUser?.classe === '--' ? 'Assigner une classe' : 'Modifier la classe'}
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Classe"
            fullWidth
            value={newClass}
            onChange={(e) => setNewClass(e.target.value)}
            placeholder="Exemple: 3A15, 2B22, etc."
            helperText="Entrez la classe de l'étudiant"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setClassDialogOpen(false)}>Annuler</Button>
          <Button onClick={handleClassAssignSubmit} variant="contained" color="primary">
            Enregistrer
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert 
          onClose={handleCloseSnackbar} 
          severity={snackbar.severity}
          variant="filled"
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default UsersList;

================================================================================
FILE: src\pages\AuthTransfer.jsx
================================================================================

import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, CircularProgress, Typography } from '@mui/material';

const AuthTransfer = () => {
  const navigate = useNavigate();
  const [error, setError] = useState('');
  useEffect(() => {
    const checkAuthAndRedirect = async () => {
      try {
        // Get token and role from URL params
        const urlParams = new URLSearchParams(window.location.search);
        const token = urlParams.get('token');
        const role = urlParams.get('role');
        
        if (token) {
          // Store token in localStorage
          localStorage.setItem('token', token);
          console.log('Token stored in localStorage');
          
          // If we have a role from URL params, use it for immediate redirect
          if (role) {
            console.log('Role from URL:', role);
            switch(role.toUpperCase()) {
              case 'STUDENT':
                navigate('/student');
                return;
              case 'TUTOR':
                navigate('/tutor');
                return;
              case 'ADMIN':
                navigate('/admin');
                return;
              default:
                // Continue with profile fetch to determine role
            }
          }
        } else {
          console.warn('No token found in URL params');
        }

        // Get user profile with token as backup
        const storedToken = localStorage.getItem('token');
        if (!storedToken) {
          setError('No authentication token found');
          setTimeout(() => navigate('/signin'), 3000);
          return;
        }

        const response = await fetch('http://localhost:5001/api/users/profile', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${storedToken}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const userData = await response.json();
          console.log('User data from profile:', userData);
          
          // Redirect based on role from profile
          switch(userData.userRole?.toUpperCase()) {
            case 'STUDENT':
              navigate('/student');
              break;
            case 'TUTOR':
              navigate('/tutor');
              break;
            case 'ADMIN':
              navigate('/admin');
              break;
            default:
              // Default to student dashboard
              navigate('/student');
          }
        } else {
          setError('Authentication failed');
          setTimeout(() => navigate('/signin'), 3000);
        }
      } catch (err) {
        console.error('Auth transfer error:', err);
        setError('Authentication failed');
        setTimeout(() => navigate('/signin'), 3000);
      }
    };

    checkAuthAndRedirect();
  }, [navigate]);

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
        textAlign: 'center',
        p: 3
      }}
    >
      {error ? (
        <Typography color="error" variant="h6">
          {error}. Redirecting to login...
        </Typography>
      ) : (
        <>
          <CircularProgress sx={{ mb: 2 }} />
          <Typography variant="h6">
            Authentication successful! Redirecting...
          </Typography>
        </>
      )}
    </Box>
  );
};

export default AuthTransfer; 
================================================================================
FILE: src\pages\forgotPassword.jsx
================================================================================


import { useState, useEffect } from 'react';
import { Box, Container, TextField, Button, Typography, Link, Paper, Alert } from '@mui/material';
import { styled } from '@mui/material/styles';
import { useNavigate } from 'react-router-dom';
import { isAuthenticated } from '../utils/authUtils';

const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const StyledButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(2, 0),
  padding: theme.spacing(1.5),
  borderRadius: '8px',
  textTransform: 'none',
  fontSize: '1rem',
  color: 'white',
  backgroundColor: '#dd2825',
  '&:hover': {
    backgroundColor: 'rgba(221, 40, 37, 0.7)',
  },
}));

const ForgotPassword = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    if (isAuthenticated()) {
      navigate('/admin');
    }
  }, [navigate]);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    setSuccess(false);

    try {
      const response = await fetch('http://localhost:5001/api/auth/forgot-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to send reset link');
      }

      setSuccess(true);
    } catch (err) {
      setError(err.message);
    }
  };

  // ✅ Redirection après succès
  useEffect(() => {
    if (success) {
      setTimeout(() => {
        navigate('/signin');
      }, 3000); // Redirige après 3 secondes
    }
  }, [success, navigate]);

  return (
    <Container component="main" maxWidth="xs">
      <StyledPaper elevation={6}>
        <Box component="div" sx={{ flexGrow: 1, display: 'flex', alignItems: 'center' }}>
          <img src="logo.png" alt="" style={{ height: '70px' }} />
        </Box>


        {error && (
          <Alert severity="error" sx={{ mb: 2, width: '100%' }}>
            {error}
          </Alert>
        )}
        {success && (
          <Alert severity="success" sx={{ mb: 2, width: '100%' }}>
            Password reset link has been sent to your email. Redirecting...
          </Alert>
        )}
        <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label="Email"
            name="email"
            autoComplete="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            sx={{ mb: 2 }}
          />
          <StyledButton type="submit" fullWidth variant="contained">
            Send Reset Link
          </StyledButton>
          <Box sx={{ mt: 2, textAlign: 'center' }}>
            <Link href="#" variant="body2" onClick={() => navigate('/signin')}>
              Remember your password? Sign In
            </Link>
          </Box>
        </Box>
      </StyledPaper>
    </Container>
  );
};

export default ForgotPassword;
================================================================================
FILE: src\pages\NotFound.jsx
================================================================================

import { Box, Button, Container, Typography } from '@mui/material';
import { useNavigate } from 'react-router-dom';

const NotFound = () => {
  const navigate = useNavigate();

  return (
    <Container component="main" maxWidth="sm">
      <Box
        sx={{
          marginTop: 8,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          textAlign: 'center',
        }}
      >
        <Typography variant="h1" component="h1" gutterBottom>
          404
        </Typography>
        <Typography variant="h5" component="h2" gutterBottom>
          Oops! Page not found.
        </Typography>
        <Typography variant="body1" color="text.secondary" paragraph>
          The page you are looking for might have been removed, had its name changed, or is temporarily unavailable.
        </Typography>
        <Button
          variant="contained"
          color="primary"
          onClick={() => navigate('/')}
          sx={{ mt: 3 }}
        >
          Go to Home
        </Button>
      </Box>
    </Container>
  );
};

export default NotFound;
================================================================================
FILE: src\pages\reserPassword.jsx
================================================================================


import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Container, Box, Typography, TextField, Button, Paper, Alert } from "@mui/material";
import { styled } from "@mui/material/styles";
import axios from "axios";

// Styled components
const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const StyledButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(2, 0),
  padding: theme.spacing(1.5),
  borderRadius: '8px',
  textTransform: 'none',
  fontSize: '1rem',
  '&.MuiButton-containedPrimary': {
    backgroundColor: '#dd2825',
    '&:hover': {
      backgroundColor: 'rgba(221, 40, 37, 0.7)',
    },
  },
}));

const ResetPassword = () => {
  const { token } = useParams(); // Retrieve the token from the URL
  const navigate = useNavigate(); // Initialize useNavigate for redirection
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  const handlePasswordReset = async (event) => {
    event.preventDefault(); // Prevent page reload
    
    // Password validation
    if (newPassword !== confirmPassword) {
      setError("Passwords do not match");
      setMessage("");  // Reset message if error occurs
      return;
    }
  
    try {
      // Sending POST request with axios
      const response = await axios.post("http://localhost:5001/api/auth/reset-password/", {
        token, // Pass the token in the request body
        newPassword,
      });
  
      // Handling response
      setMessage(response.data.message || "Password reset successfully");
      setError(""); // Reset errors

      // Redirect to Sign In page after success
      setTimeout(() => {
        navigate('/signin'); // Redirect after a short delay to allow message display
      }, 2000); // Wait 2 seconds before redirecting
    } catch (err) {
      console.error("Error during password reset:", err);  // Log error for inspection
      
      // Check if the response exists and display it
      if (err.response) {
        console.error("Error with the response:", err.response);
        setError(err.response?.data?.message || "Error during password reset");
      } else if (err.request) {
        // If the request was sent but no response received
        console.error("Request error:", err.request);
        setError("Server connection issue");
      } else {
        // Other errors
        console.error("General error:", err.message);
        setError("An error occurred");
      }
      setMessage("");  // Reset message
    }
  };

  return (
    <Container component="main" maxWidth="xs">
      <StyledPaper elevation={6}>
        {/* Centered Logo */}
        <Box component="div" sx={{ flexGrow: 1, display: 'flex', justifyContent: 'center', mb: 3 }}>
          <img src="/logo.png" alt="Logo" style={{ height: '70px', width: 'auto' }} />
        </Box>
        
        {error && <Alert severity="error" sx={{ mb: 2, width: '100%' }}>{error}</Alert>}
        {message && <Alert severity="success" sx={{ mb: 2, width: '100%' }}>{message}</Alert>}
        
        <form onSubmit={handlePasswordReset} style={{ width: '100%' }}>
          <TextField
            label="New Password"
            type="password"
            fullWidth
            required
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            margin="normal"
          />
          <TextField
            label="Confirm Password"
            type="password"
            fullWidth
            required
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            margin="normal"
          />
          <StyledButton type="submit" variant="contained" color="primary" fullWidth sx={{
            color: 'white'     // Text color set to white
          }}>
            Reset
          </StyledButton>
        </form>

        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Typography variant="body2" color="textSecondary">
            Return to <a href="/signin" style={{ textDecoration: 'none', color: '#dd2825' }}>Sign In</a>
          </Typography>
        </Box>
      </StyledPaper>
    </Container>
  );
};

export default ResetPassword;
================================================================================
FILE: src\pages\SignIn.jsx
================================================================================


import { useState, useEffect } from 'react';
import GitHubIcon from '@mui/icons-material/GitHub';
import { isAuthenticated } from '../utils/authUtils';
import FaceLogin from '../components/FaceLogin';
import FaceIcon from '@mui/icons-material/Face';

import { 
  Box,
  Container,
  TextField,
  Button,
  Typography,
  Checkbox,
  FormControlLabel,
  Link,
  Paper,
  Divider,
  Alert,
  Dialog
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { useNavigate } from 'react-router-dom';
import GoogleIcon from '@mui/icons-material/Google';
import { Link as RouterLink } from 'react-router-dom';

const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const StyledButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(2, 0),
  padding: theme.spacing(1.5),
  borderRadius: '8px',
  textTransform: 'none',
  fontSize: '1rem',
  '&.MuiButton-containedPrimary': {
    backgroundColor: '#dd2825',
    '&:hover': {
      backgroundColor: 'rgba(221, 40, 37, 0.7)', // Même couleur au survol
    },
  },
}));

const SignIn = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  });
  const [error, setError] = useState('');
  const [remainingAttempts, setRemainingAttempts] = useState(3);
  const [blockedUntil, setBlockedUntil] = useState(null);
  const [remainingTime, setRemainingTime] = useState({ minutes: 0, seconds: 0 });
  const [showFaceLogin, setShowFaceLogin] = useState(false);

  useEffect(() => {
    if (isAuthenticated()) {
      navigate('/admin');
    }
  }, [navigate]);

  useEffect(() => {
    // Si le compte est bloqué, mettre à jour le blockedUntil toutes les secondes
    let interval;
    if (blockedUntil) {
      // Mettre à jour le temps restant immédiatement
      updateRemainingTime();
      
      // Puis lancer l'intervalle pour mettre à jour chaque seconde
      interval = setInterval(() => {
        if (blockedUntil && blockedUntil < Date.now()) {
          setBlockedUntil(null);
          setRemainingAttempts(3);
          clearInterval(interval);
        } else {
          updateRemainingTime();
        }
      }, 1000);
    }
    
    return () => clearInterval(interval);
  }, [blockedUntil]);

  // Fonction pour calculer et mettre à jour le temps restant
  const updateRemainingTime = () => {
    if (!blockedUntil) return;
    
    const timeLeft = blockedUntil - Date.now();
    if (timeLeft <= 0) {
      setRemainingTime({ minutes: 0, seconds: 0 });
      return;
    }
    
    const minutes = Math.floor(timeLeft / 60000);
    const seconds = Math.floor((timeLeft % 60000) / 1000);
    
    setRemainingTime({ minutes, seconds });
  };

  const handleChange = (event) => {
    const { name, value, checked } = event.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'rememberMe' ? checked : value
    }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    
    // Si le compte est bloqué, empêcher la soumission
    if (blockedUntil && blockedUntil > Date.now()) {
      return;
    }
    
    try {
      const response = await fetch('http://localhost:5001/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password
        })
      });

      const data = await response.json();

      if (!response.ok) {
        // Gestion spécifique pour le cas de compte bloqué (status 429)
        if (response.status === 429) {
          setBlockedUntil(data.blockedUntil);
          setRemainingAttempts(0);
        } else if (data.remainingAttempts !== undefined) {
          // Mettre à jour le nombre de tentatives restantes
          setRemainingAttempts(data.remainingAttempts);
        }
        
        throw new Error(data.message || 'Failed to login');
      }

      // Réinitialiser les tentatives après un login réussi
      setRemainingAttempts(3);
      setBlockedUntil(null);

      // Save token
      localStorage.setItem('token', data.token);
      
      // Redirection basée sur le rôle de l'utilisateur
      const userRole = data.user.role;
      if (userRole === 'ADMIN') {
        navigate('/admin');
      } else if (userRole === 'STUDENT') {
        navigate('/student');
      } else if (userRole === 'TUTOR') {
        navigate('/tutor');
      } else {
        // Default fallback
        navigate('/admin');
      }
      
    } catch (err) {
      setError(err.message);
      console.error('Login error:', err);
    }
  };

  const handleFaceLogin = () => {
    setShowFaceLogin(true);
  };

  const handleCancelFaceLogin = () => {
    setShowFaceLogin(false);
  };

  const handleFaceLoginSuccess = (data) => {
    // Save token
    localStorage.setItem('token', data.token);
    
    // Close the dialog
    setShowFaceLogin(false);
    
    // Redirect to admin dashboard
    navigate('/admin');
  };

  const googleLogin = () => {
    window.location.href = "http://localhost:5001/auth/google";
  };

  const githubLogin = () => {
    window.open(
      "http://localhost:5001/auth/github",
      "_self"
    );
  };

  return (
    <Container component="main" maxWidth="xs">
      <StyledPaper elevation={6}>
      <Box
    component="div"
    sx={{
      flexGrow: 1,
      display: 'flex',
      alignItems: 'center'
    }}
  >
    <img 
    src="logo.png" 
    alt="" 
    style={{ height: '70px' }} 
  />
    </Box>
        {error && (
          <Alert severity="error" sx={{ mb: 2, width: '100%' }}>
            {error}
          </Alert>
        )}
        {blockedUntil && blockedUntil > Date.now() && (
          <Alert severity="warning" sx={{ mb: 2, width: '100%' }}>
            <div>
              <strong>Compte temporairement bloqué</strong>
              <div>
                Après 3 tentatives infructueuses, votre compte est bloqué pendant 2 minutes.
              </div>
              <div style={{ marginTop: '10px', marginBottom: '10px' }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '8px' }}>
                  <div style={{ 
                    display: 'inline-block', 
                    padding: '5px 12px', 
                    background: '#f3f3f3',
                    borderRadius: '4px',
                    fontFamily: 'monospace',
                    fontWeight: 'bold',
                    fontSize: '1.2rem',
                    color: '#dd2825'
                  }}>
                    {remainingTime.minutes}:{remainingTime.seconds < 10 ? `0${remainingTime.seconds}` : remainingTime.seconds}
                  </div>
                </div>
                <div>
                  Réessayez après lexpiration du délai ou{' '}
                  <Link component={RouterLink} to="/forgot-password" variant="body2" sx={{ fontWeight: 'bold' }}>
                    réinitialisez votre mot de passe
                  </Link>.
                </div>
              </div>
            </div>
          </Alert>
        )}
        {!blockedUntil && remainingAttempts < 3 && remainingAttempts > 0 && (
          <Alert severity="info" sx={{ mb: 2, width: '100%' }}>
            {remainingAttempts === 1 ? (
              <strong>Attention ! Dernière tentative avant blocage temporaire du compte.</strong>
            ) : (
              <div>Il vous reste {remainingAttempts} tentatives avant le blocage temporaire du compte.</div>
            )}
          </Alert>
        )}
        <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label="Email"
            name="email"
            autoComplete="email"
            autoFocus
            value={formData.email}
            onChange={handleChange}
            sx={{ mb: 2 }}
            disabled={blockedUntil && blockedUntil > Date.now()}
          />
          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
            value={formData.password}
            onChange={handleChange}
            sx={{ mb: 2 }}
            disabled={blockedUntil && blockedUntil > Date.now()}
          />
          <FormControlLabel
            control={
              <Checkbox
                value="remember"
                name="rememberMe"
                checked={formData.rememberMe}
                onChange={handleChange}
                color="primary"
              />
            }
            label="Remember Me"
          />
<StyledButton
  type="submit"
  fullWidth
  variant="contained"
  color="primary"
  sx={{ mt: 2, mb: 2 }}
  disabled={blockedUntil && blockedUntil > Date.now()}
>
  Sign In
</StyledButton>
          
          <Box sx={{ my: 2, textAlign: 'center' }}>
            <Divider sx={{ my: 2 }}>
              <Typography color="textSecondary">OR</Typography>
            </Divider>
          </Box>

          <StyledButton
            fullWidth
            variant="outlined"
            startIcon={<FaceIcon />}
            onClick={handleFaceLogin}
            sx={{ mb: 2 }}
          >
            Sign in with Face Recognition
          </StyledButton>

          <StyledButton
            fullWidth
            variant="outlined"
            startIcon={<GoogleIcon />}
            onClick={googleLogin}
          >
            Sign in using Google
          </StyledButton>

          <StyledButton
            fullWidth
            variant="outlined"
            startIcon={<GitHubIcon />}
            onClick={githubLogin}
            style={{ marginTop: '1px' }}
          >
            Sign in using GitHub
          </StyledButton>

          <Box sx={{ mt: 2, textAlign: 'center' }}>
            <Link
              href="#"
              variant="body2"
              onClick={() => navigate('/forgot-password')}
              sx={{ display: 'block', mb: 1 }}
            >
              I forgot my password
            </Link>
            <Link
              href="#"
              variant="body2"
              onClick={() => navigate('/signup')}
              
            >
              Register a new membership
            </Link>
          </Box>
        </Box>
      </StyledPaper>

      {/* Face Login Dialog */}
      <Dialog 
        open={showFaceLogin} 
        onClose={handleCancelFaceLogin}
        fullWidth
        maxWidth="sm"
      >
        <FaceLogin 
          onLogin={handleFaceLoginSuccess} 
          onCancel={handleCancelFaceLogin} 
        />
      </Dialog>
    </Container>
  );
};

export default SignIn;
================================================================================
FILE: src\pages\SignUp.jsx
================================================================================

import { useState, useEffect } from 'react';
import {
  Box,
  Container,
  TextField,
  Button,
  Typography,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Link,
  Alert,
  Stepper,
  Step,
  StepLabel
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { useNavigate } from 'react-router-dom';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { isAuthenticated } from '../utils/authUtils';

const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const StyledButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(2, 0),
  padding: theme.spacing(1.5),
  borderRadius: '8px',
  textTransform: 'none',
  fontSize: '1rem',
  '&.MuiButton-containedPrimary': {
    backgroundColor: '#dd2825',
    '&:hover': {
      backgroundColor: '', // Même couleur au survol
    },
  },
}));

const SignUp = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    username: '',
    email: '',
    password: '',
    birthDate: null,
    role: '',
    educationLevel: '',
    cin: ''
  });
  const [error, setError] = useState('');
  const [faceImage, setFaceImage] = useState(null);
  const [faceDescriptor, setFaceDescriptor] = useState(null);
  const [activeStep, setActiveStep] = useState(0);
  const steps = ['Personal Information', 'Face Detection'];

  useEffect(() => {
    if (isAuthenticated()) {
      navigate('/admin');
    }
  }, [navigate]);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleDateChange = (date) => {
    setFormData(prev => ({
      ...prev,
      birthDate: date
    }));
  };

  const handleFileUpload = async (event) => {
    try {
      const file = event.target.files[0];
      if (!file) return;

      // Create FormData
      const formData = new FormData();
      formData.append('faceImage', file);
      
      // Upload the face image
      const response = await fetch('http://localhost:5001/api/face-detection/upload', {
        method: 'POST',
        body: formData
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to upload face image');
      }
      
      // Save the file path and face descriptor
      setFaceImage(data.filePath);
      setFaceDescriptor(data.faceDescriptor);
      
      console.log('Face image uploaded successfully with descriptor');
    } catch (error) {
      console.error('Error uploading face image:', error);
      setError('Failed to upload face image. Please try again.');
    }
  };

  const handleNext = () => {
    setActiveStep(prevStep => prevStep + 1);
  };

  const handleBack = () => {
    setActiveStep(prevStep => prevStep - 1);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setError('');
    
    // Validate that we have both face image and descriptor
    if (!faceImage || !faceDescriptor) {
      setError('Face image is required. Please upload your face image.');
      return;
    }

    // Validate CIN for student role
    if (formData.role === 'STUDENT' && !formData.cin) {
      setError('CIN is required for students.');
      return;
    }

    try {
      const response = await fetch('http://localhost:5001/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          firstName: formData.firstName,
          lastName: formData.lastName,
          email: formData.email,
          password: formData.password,
          role: formData.role,
          faceImage: faceImage,
          faceDescriptor: faceDescriptor,
          cin: formData.cin
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Registration failed');
      }

      // Registration successful
      navigate('/signin');
      
    } catch (err) {
      setError(err.message);
      console.error('Registration error:', err);
    }
  };

  const renderStep = (step) => {
    switch (step) {
      case 0:
        return (
          <Box component="form" sx={{ width: '100%' }}>
            <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
              <TextField
                required
                name="firstName"
                label="First Name"
                value={formData.firstName}
                onChange={handleChange}
                fullWidth
              />
              <TextField
                required
                name="lastName"
                label="Last Name"
                value={formData.lastName}
                onChange={handleChange}
                fullWidth
              />
            </Box>
            
            <TextField
              margin="normal"
              required
              fullWidth
              name="username"
              label="Username"
              value={formData.username}
              onChange={handleChange}
            />
            
            <TextField
              margin="normal"
              required
              fullWidth
              name="email"
              label="Email Address"
              type="email"
              value={formData.email}
              onChange={handleChange}
            />
            
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="Password"
              type="password"
              value={formData.password}
              onChange={handleChange}
            />
            
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DatePicker
                label="Birth Date"
                value={formData.birthDate}
                onChange={handleDateChange}
                PopperProps={{
                  disablePortal: true,
                  modifiers: [
                    {
                      name: 'preventOverflow',
                      options: {
                        boundary: 'window',
                      },
                    },
                  ],
                }}
                slotProps={{
                  desktop: {
                    transitionDuration: '0ms',
                  },
                }}
                sx={{ width: '100%', mt: 2 }}
              />
            </LocalizationProvider>
            
            <FormControl fullWidth sx={{ mt: 2 }}>
              <InputLabel>Role</InputLabel>
              <Select
                name="role"
                value={formData.role}
                onChange={handleChange}
                required
              >
                <MenuItem value="STUDENT">Student</MenuItem>
                <MenuItem value="TUTOR">Tutor</MenuItem>
              </Select>
            </FormControl>
            
            {formData.role === 'STUDENT' && (
              <>
                <FormControl fullWidth sx={{ mt: 2 }}>
                  <InputLabel>Education Level</InputLabel>
                  <Select
                    name="educationLevel"
                    value={formData.educationLevel}
                    onChange={handleChange}
                    required
                  >
                    <MenuItem value="BEGINNER">Beginner</MenuItem>
                    <MenuItem value="INTERMEDIATE">Intermediate</MenuItem>
                    <MenuItem value="ADVANCED">Advanced</MenuItem>
                  </Select>
                </FormControl>
                
                <TextField
                  margin="normal"
                  required
                  fullWidth
                  name="cin"
                  label="CIN (Carte d'Identité Nationale)"
                  value={formData.cin}
                  onChange={handleChange}
                  inputProps={{ maxLength: 8 }}
                  helperText="Votre numéro d'identité est requis pour l'inscription"
                />
                
                <TextField
                  margin="normal"
                  fullWidth
                  name="classe"
                  label="Classe"
                  value="--"
                  disabled
                  helperText="Votre classe sera attribuée par l'administrateur"
                />
              </>
            )}

            <StyledButton
              fullWidth
              variant="contained"
              color="primary"
              onClick={handleNext}
              sx={{
                color: 'white'
              }}
            >
              Next: Face Detection
            </StyledButton>
          </Box>
        );
      case 1:
        return (
          <Box sx={{ width: '100%' }}>
            <Typography variant="body1" sx={{ mb: 2 }}>
              Please upload a clear photo of your face. This will be used for authentication.
            </Typography>
            
            <Button
              variant="contained"
              component="label"
              fullWidth
              sx={{ mb: 2 }}
            >
              Upload Face Image
              <input
                type="file"
                hidden
                accept="image/*"
                onChange={handleFileUpload}
              />
            </Button>
            
            {faceImage && (
              <Box sx={{ mt: 2, textAlign: 'center' }}>
                <Typography variant="body1" color="success.main">
                  Face image uploaded successfully!
                </Typography>
                <img 
                  src={`http://localhost:5001${faceImage}`} 
                  alt="Uploaded face" 
                  style={{ width: '200px', height: 'auto', margin: '10px auto', borderRadius: '8px' }} 
                />
              </Box>
            )}
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
              <Button
                variant="outlined"
                onClick={handleBack}
              >
                Back
              </Button>
              
              <StyledButton
                type="submit"
                variant="contained"
                color="primary"
                disabled={!faceImage || !faceDescriptor}
                onClick={handleSubmit}
                sx={{
                  color: 'white'
                }}
              >
                Complete Registration
              </StyledButton>
            </Box>
          </Box>
        );
      default:
        return null;
    }
  };

  return (
    <Container component="main" maxWidth="sm">
      <StyledPaper elevation={6}>
        {/* Logo */}
        <Box component="div" sx={{ flexGrow: 1, display: 'flex', justifyContent: 'center', mb: 3 }}>
          <img src="/logo.png" alt="Logo" style={{ height: '70px', width: 'auto' }} />
        </Box>

        {/* Stepper */}
        <Stepper activeStep={activeStep} sx={{ width: '100%', mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {error && (
          <Alert severity="error" sx={{ mb: 2, width: '100%' }}>
            {error}
          </Alert>
        )}

        {renderStep(activeStep)}
        
        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Link
            href="#"
            variant="body2"
            onClick={() => navigate('/signin')}
            sx={{ display: 'block', mb: 1 }}
          >
            Already have an account? Sign in
          </Link>
        </Box>
      </StyledPaper>
    </Container>
  );
};

export default SignUp;

================================================================================
FILE: src\pages\student\Dashboard.jsx
================================================================================

import { Box, Typography, Paper, Grid } from '@mui/material';
import { useOutletContext } from 'react-router-dom';

const StudentDashboard = () => {
  const { user } = useOutletContext();

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Typography variant="h4" sx={{ mb: 4, color: '#dd2825', fontWeight: 'bold' }}>
        Student Dashboard
      </Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Paper
            elevation={3}
            sx={{
              p: 3,
              height: '100%',
              borderRadius: 2,
              bgcolor: 'white',
              border: '1px solid #eaeaea'
            }}
          >
            <Typography variant="h6" sx={{ mb: 2, color: '#dd2825' }}>
              Welcome to your Student Portal
            </Typography>
            <Typography variant="body1">
              Here you can manage your projects, tasks, and view your progress.
            </Typography>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={6}>
          <Paper
            elevation={3}
            sx={{
              p: 3,
              height: '100%',
              borderRadius: 2,
              bgcolor: 'white',
              border: '1px solid #eaeaea'
            }}
          >
            <Typography variant="h6" sx={{ mb: 2, color: '#dd2825' }}>
              Your Profile
            </Typography>
            {user && (
              <Box>
                <Typography variant="body1">
                  <strong>Name:</strong> {user.firstName} {user.lastName}
                </Typography>
                <Typography variant="body1">
                  <strong>Email:</strong> {user.email}
                </Typography>
                <Typography variant="body1">
                  <strong>Role:</strong> {user.userRole}
                </Typography>
              </Box>
            )}
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default StudentDashboard; 
================================================================================
FILE: src\pages\student\ProjectDetails.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Chip,
  Divider,
  Grid,
  Alert,
  LinearProgress
} from '@mui/material';
import TaskIcon from '@mui/icons-material/Task';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const ProjectDetails = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [project, setProject] = useState(null);

  useEffect(() => {
    // Placeholder for loading project details
    const timer = setTimeout(() => {
      setLoading(false);
      setProject({
        _id: projectId,
        name: 'Sample Project',
        description: 'This is a placeholder for the project description with detailed information about goals, scope, and deliverables.',
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        status: 'In Progress',
        tags: ['Web', 'React', 'NodeJS'],
        createdAt: new Date().toISOString()
      });
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [projectId]);

  const handleBack = () => {
    navigate('/student/projects');
  };

  const handleViewTasks = () => {
    navigate(`/student/projects/${projectId}/tasks`);
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading project details...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Projects
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Project Details
        </Typography>
      </Box>

      {project && (
        <Paper sx={{ p: 4 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3, flexWrap: 'wrap', gap: 2 }}>
            <Typography variant="h4">{project.name}</Typography>
            <Button
              variant="contained"
              startIcon={<TaskIcon />}
              onClick={handleViewTasks}
              sx={{
                backgroundColor: '#dd2825',
                color: 'white',
                '&:hover': {
                  backgroundColor: '#c42020'
                }
              }}
            >
              View My Tasks
            </Button>
          </Box>

          <Divider sx={{ mb: 3 }} />

          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6">Description</Typography>
              <Typography paragraph>{project.description}</Typography>
            </Grid>

            <Grid item xs={12} sm={6}>
              <Typography variant="h6">Status</Typography>
              <Chip 
                label={project.status} 
                color={project.status === 'Completed' ? 'success' : 'primary'} 
                sx={{ mt: 1 }} 
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <Typography variant="h6">Timeline</Typography>
              <Typography>
                {new Date(project.startDate).toLocaleDateString()} - {new Date(project.endDate).toLocaleDateString()}
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <Typography variant="h6">Skills & Technologies</Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>
                {project.tags.map((tag, index) => (
                  <Chip key={index} label={tag} />
                ))}
              </Box>
            </Grid>
          </Grid>
        </Paper>
      )}
    </Box>
  );
};

export default ProjectDetails; 
================================================================================
FILE: src\pages\student\ProjectsList.jsx
================================================================================


import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Chip,
  Alert,
  LinearProgress
} from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';

const ProjectsList = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    // Placeholder for loading projects
    const timer = setTimeout(() => {
      setLoading(false);
      setProjects([
        {
          _id: '1',
          name: 'Mobile App Development',
          description: 'Develop a cross-platform mobile app for student resources',
          status: 'In Progress',
          startDate: '2023-10-01',
          endDate: '2023-12-15',
          tags: ['Mobile', 'React Native']
        },
        {
          _id: '2',
          name: 'Database Design Project',
          description: 'Design and implement a normalized database for a school management system',
          status: 'Planning',
          startDate: '2023-11-15',
          endDate: '2024-01-30',
          tags: ['SQL', 'Database', 'Design']
        }
      ]);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  const handleViewProject = (projectId) => {
    navigate(`/student/projects/${projectId}`);
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading your projects...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" sx={{ mb: 3, color: '#dd2825' }}>
        My Projects
      </Typography>

      {projects.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6">You haven't been assigned to any projects yet</Typography>
          <Typography paragraph sx={{ mt: 2 }}>
            Projects assigned to you by tutors will appear here.
          </Typography>
        </Paper>
      ) : (
        <Grid container spacing={3}>
          {projects.map((project) => (
            <Grid item xs={12} md={6} lg={4} key={project._id}>
              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                <CardContent sx={{ flexGrow: 1 }}>
                  <Typography variant="h6" gutterBottom>
                    {project.name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    {project.description}
                  </Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body2">Status:</Typography>
                    <Chip 
                      label={project.status}
                      size="small"
                      color={
                        project.status === 'Completed' ? 'success' : 
                        project.status === 'In Progress' ? 'primary' : 
                        'default'
                      }
                    />
                  </Box>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    Timeline: {new Date(project.startDate).toLocaleDateString()} - {new Date(project.endDate).toLocaleDateString()}
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>
                    {project.tags.map((tag, index) => (
                      <Chip key={index} label={tag} size="small" />
                    ))}
                  </Box>
                </CardContent>
                <CardActions>
                  <Button 
                    startIcon={<VisibilityIcon />}
                    onClick={() => handleViewProject(project._id)}
                    fullWidth
                  >
                    View Details
                  </Button>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
    </Box>
  );
};

export default ProjectsList; 
================================================================================
FILE: src\pages\student\TaskDetails.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Chip,
  Divider,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  LinearProgress,
  Tooltip,
  IconButton
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import InfoIcon from '@mui/icons-material/Info';
import RestoreIcon from '@mui/icons-material/Restore';

const TaskDetails = () => {
  const { projectId, taskId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [task, setTask] = useState(null);
  const [status, setStatus] = useState('');
  const [statusHistory, setStatusHistory] = useState([]);

  useEffect(() => {
    // Check if we have a saved task in localStorage
    const savedTask = localStorage.getItem(`task_${taskId}`);
    
    // Placeholder for loading task details
    const timer = setTimeout(() => {
      if (savedTask) {
        const parsedTask = JSON.parse(savedTask);
        setTask(parsedTask);
        setStatus(parsedTask.status);
        
        // Get saved status history or create default
        const savedHistory = localStorage.getItem(`task_history_${taskId}`);
        if (savedHistory) {
          setStatusHistory(JSON.parse(savedHistory));
        } else {
          const defaultHistory = [
            { status: 'To Do', timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString() },
            { status: parsedTask.status, timestamp: new Date().toISOString() }
          ];
          setStatusHistory(defaultHistory);
          localStorage.setItem(`task_history_${taskId}`, JSON.stringify(defaultHistory));
        }
      } else {
        const sampleTask = {
          _id: taskId,
          title: 'Research Component Design',
          description: 'Research and document UI component design patterns for the project. This should include a review of modern design libraries and frameworks, focusing on responsive and accessible components that can be reused across the application.',
          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          priority: 'Medium',
          status: 'In Progress',
          createdAt: new Date().toISOString()
        };
        
        setTask(sampleTask);
        setStatus(sampleTask.status);
        
        // Save to localStorage
        localStorage.setItem(`task_${taskId}`, JSON.stringify(sampleTask));
        
        // Mock status history
        const defaultHistory = [
          { status: 'To Do', timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString() },
          { status: 'In Progress', timestamp: new Date().toISOString() }
        ];
        setStatusHistory(defaultHistory);
        localStorage.setItem(`task_history_${taskId}`, JSON.stringify(defaultHistory));
      }
      
      setLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [taskId]);

  const handleBack = () => {
    navigate(`/student/projects/${projectId}/tasks`);
  };

  const handleStatusChange = (e) => {
    setStatus(e.target.value);
  };

  const handleUpdateStatus = () => {
    setSaving(true);
    setError('');
    setSuccess('');
    
    // Simulate saving
    setTimeout(() => {
      // Update task with new status
      const updatedTask = { ...task, status };
      setTask(updatedTask);
      
      // Save to localStorage
      localStorage.setItem(`task_${taskId}`, JSON.stringify(updatedTask));
      
      // Add to status history
      const newHistory = [
        ...statusHistory,
        { status, timestamp: new Date().toISOString() }
      ];
      setStatusHistory(newHistory);
      
      // Save history to localStorage
      localStorage.setItem(`task_history_${taskId}`, JSON.stringify(newHistory));
      
      setSaving(false);
      setSuccess('Task status updated successfully!');
    }, 1000);
  };

  // Get status chip color based on status
  const getStatusColor = (status) => {
    switch(status) {
      case 'Done':
        return 'success';
      case 'In Progress':
        return 'primary';
      case 'To Do':
        return 'default';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading task details...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Tasks
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Task Details
        </Typography>
      </Box>

      {success && <Alert severity="success" sx={{ mb: 3 }}>{success}</Alert>}

      {task && (
        <Paper sx={{ p: 4 }}>
          <Typography variant="h4" gutterBottom>{task.title}</Typography>
          
          <Divider sx={{ my: 3 }} />

          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6">Description</Typography>
              <Typography paragraph>{task.description}</Typography>
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Priority</Typography>
              <Chip 
                label={task.priority} 
                color={
                  task.priority === 'High' ? 'error' : 
                  task.priority === 'Medium' ? 'warning' : 
                  'info'
                } 
                sx={{ mt: 1 }} 
              />
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Due Date</Typography>
              <Typography>
                {new Date(task.dueDate).toLocaleDateString()}
              </Typography>
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Current Status</Typography>
              <Chip 
                label={task.status} 
                color={getStatusColor(task.status)} 
                sx={{ mt: 1 }} 
              />
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                <Typography variant="h6">Update Status</Typography>
                <Tooltip title="You can freely change the task status at any time, even after it has been marked as completed.">
                  <IconButton size="small">
                    <InfoIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              </Box>
              
              <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', gap: 2 }}>
                <FormControl sx={{ minWidth: 200 }}>
                  <InputLabel>Status</InputLabel>
                  <Select
                    value={status}
                    onChange={handleStatusChange}
                    label="Status"
                    disabled={saving}
                  >
                    <MenuItem value="To Do">To Do</MenuItem>
                    <MenuItem value="In Progress">In Progress</MenuItem>
                    <MenuItem value="Done">Done</MenuItem>
                  </Select>
                </FormControl>
                <Button
                  variant="contained"
                  onClick={handleUpdateStatus}
                  disabled={saving || status === task.status}
                  sx={{
                    backgroundColor: '#dd2825',
                    color: 'white',
                    '&:hover': {
                      backgroundColor: '#c42020'
                    }
                  }}
                >
                  {saving ? 'Updating...' : 'Update Status'}
                </Button>
              </Box>
              
              <Typography 
                variant="body2" 
                color="text.secondary"
                sx={{ mt: 1 }}
              >
                Note: You can change the status of your task at any time based on your progress, even if it was previously marked as completed.
              </Typography>
            </Grid>
            
            <Grid item xs={12}>
              <Box sx={{ mt: 2 }}>
                <Typography variant="subtitle2" gutterBottom>Status History</Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {statusHistory.map((entry, index) => (
                    <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Chip 
                        label={entry.status} 
                        size="small"
                        color={getStatusColor(entry.status)}
                      />
                      <Typography variant="caption" color="text.secondary">
                        {new Date(entry.timestamp).toLocaleString()}
                      </Typography>
                      {index === statusHistory.length - 1 && index > 0 && (
                        <Tooltip title="Revert to this status">
                          <IconButton 
                            size="small" 
                            onClick={() => setStatus(entry.status)}
                            sx={{ ml: 'auto' }}
                          >
                            <RestoreIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                      )}
                    </Box>
                  ))}
                </Box>
              </Box>
            </Grid>
          </Grid>
        </Paper>
      )}
    </Box>
  );
};

export default TaskDetails; 
================================================================================
FILE: src\pages\student\TasksList.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Alert,
  LinearProgress
} from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const TasksList = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [project, setProject] = useState(null);
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    // Placeholder for loading tasks
    const timer = setTimeout(() => {
      setProject({
        _id: projectId,
        name: 'Sample Project'
      });
      
      // Define default tasks
      const defaultTasks = [
        {
          _id: '1',
          title: 'Research Component Design',
          description: 'Research and document UI component design patterns',
          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
          priority: 'High',
          status: 'In Progress'
        },
        {
          _id: '2',
          title: 'Create Project Documentation',
          description: 'Create documentation for the project setup process',
          dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
          priority: 'Medium',
          status: 'To Do'
        }
      ];
      
      // Check localStorage for updated tasks
      const updatedTasks = defaultTasks.map(task => {
        const savedTask = localStorage.getItem(`task_${task._id}`);
        return savedTask ? JSON.parse(savedTask) : task;
      });
      
      setTasks(updatedTasks);
      setLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [projectId]);

  const handleBack = () => {
    navigate(`/student/projects/${projectId}`);
  };

  const handleViewTask = (taskId) => {
    navigate(`/student/projects/${projectId}/tasks/${taskId}`);
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading tasks...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Project
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back to Project
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          My Tasks for {project?.name}
        </Typography>
      </Box>

      {tasks.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6">No tasks assigned yet</Typography>
          <Typography paragraph sx={{ mt: 2 }}>
            Your tutor hasn't assigned any tasks for this project yet.
          </Typography>
        </Paper>
      ) : (
        <>
          <Box sx={{ mb: 3 }}>
            <Alert severity="info" sx={{ mb: 2 }}>
              You can change the status of your tasks at any time, including marking tasks as 'In Progress' even after they were completed.
            </Alert>
          </Box>
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
                  <TableCell><Typography variant="subtitle2">Task</Typography></TableCell>
                  <TableCell><Typography variant="subtitle2">Due Date</Typography></TableCell>
                  <TableCell><Typography variant="subtitle2">Priority</Typography></TableCell>
                  <TableCell><Typography variant="subtitle2">Status</Typography></TableCell>
                  <TableCell><Typography variant="subtitle2">Action</Typography></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {tasks.map((task) => (
                  <TableRow key={task._id} hover>
                    <TableCell>
                      <Typography variant="body1">{task.title}</Typography>
                      <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
                        {task.description.length > 60 
                          ? `${task.description.substring(0, 60)}...` 
                          : task.description}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {new Date(task.dueDate).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={task.priority} 
                        size="small"
                        color={
                          task.priority === 'High' ? 'error' : 
                          task.priority === 'Medium' ? 'warning' : 
                          'info'
                        } 
                      />
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={task.status} 
                        size="small"
                        color={
                          task.status === 'Done' ? 'success' : 
                          task.status === 'In Progress' ? 'primary' : 
                          'default'
                        } 
                      />
                    </TableCell>
                    <TableCell>
                      <Button
                        startIcon={<VisibilityIcon />}
                        onClick={() => handleViewTask(task._id)}
                        size="small"
                      >
                        View
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </>
      )}
    </Box>
  );
};

export default TasksList;
================================================================================
FILE: src\pages\tutor\ClassesList.jsx
================================================================================

// src/pages/tutor/ClassesList.jsx
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  LinearProgress,
  Alert,
  Tooltip
} from '@mui/material';
import { Visibility as VisibilityIcon } from '@mui/icons-material';
import { fetchClasses } from '../../api/classApi';

const ClassesList = () => {
  const navigate = useNavigate();
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchTutorClasses();
  }, []);

  const fetchTutorClasses = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await fetchClasses();
      setClasses(data);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching classes:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleViewDetails = (classId) => {
    navigate(`/tutor/classes/${classId}`);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" sx={{ mb: 3, color: '#dd2825' }}>
        My Classes
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {loading ? (
        <LinearProgress />
      ) : classes.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6">No Classes Assigned</Typography>
          <Typography variant="body1" sx={{ mt: 1 }}>
            You are not assigned to any classes yet. Please contact the admin.
          </Typography>
        </Paper>
      ) : (
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
                <TableCell>Class Name</TableCell>
                <TableCell>Description</TableCell>
                <TableCell>Number of Students</TableCell>
                <TableCell>Created By</TableCell>
                <TableCell align="right">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {classes.map((classItem) => (
                <TableRow key={classItem._id} hover>
                  <TableCell>{classItem.name}</TableCell>
                  <TableCell>{classItem.description || 'No description'}</TableCell>
                  <TableCell>{classItem.students.length}</TableCell>
                  <TableCell>
                    {classItem.createdBy ? `${classItem.createdBy.firstName} ${classItem.createdBy.lastName}` : 'Unknown'}
                  </TableCell>
                  <TableCell align="right">
                    <Tooltip title="View Details">
                      <IconButton
                        onClick={() => handleViewDetails(classItem._id)}
                        size="small"
                      >
                        <VisibilityIcon />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Box>
  );
};

export default ClassesList;
================================================================================
FILE: src\pages\tutor\components\ClassDetails.jsx
================================================================================

// src/pages/tutor/ClassDetails.jsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  LinearProgress,
  Alert,
  Divider,
  Grid,
  Chip,
  Avatar,
  Tooltip,
  IconButton
} from '@mui/material';
import { ArrowBack as ArrowBackIcon, Visibility as VisibilityIcon } from '@mui/icons-material';
import { fetchClassById } from '../../../api/classApi';

const ClassDetails = () => {
  const { classId } = useParams();
  const navigate = useNavigate();
  const [classDetails, setClassDetails] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchClassDetails();
  }, [classId]);

  const fetchClassDetails = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await fetchClassById(classId);
      setClassDetails(data);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching class details:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    navigate('/tutor/classes');
  };

  const handleViewStudent = (studentId) => {
    navigate(`/tutor/students/${studentId}`); // You may need to create a student details page if required
  };

  const getProfileImageUrl = (user) => {
    if (!user) return null;
    if (user.profilePicture || user.faceImage || user.avatar) {
      const imagePath = user.profilePicture || user.faceImage || user.avatar;
      if (imagePath.startsWith('http')) {
        return imagePath;
      } else {
        return `http://localhost:5001${imagePath.startsWith('/') ? '' : '/'}${imagePath}`;
      }
    }
    return null;
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading class details...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Classes
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Class Details
        </Typography>
      </Box>

      {classDetails && (
        <Paper sx={{ p: 4 }}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h4">{classDetails.name}</Typography>
              <Typography variant="body1" sx={{ mt: 1 }}>
                {classDetails.description || 'No description provided'}
              </Typography>
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="h6">Class Information</Typography>
              <Grid container spacing={2} sx={{ mt: 1 }}>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Created By</Typography>
                  <Typography variant="body1">
                    {classDetails.createdBy ? `${classDetails.createdBy.firstName} ${classDetails.createdBy.lastName}` : 'Unknown'}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Created At</Typography>
                  <Typography variant="body1">
                    {new Date(classDetails.createdAt).toLocaleDateString()}
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2" color="text.secondary">Number of Students</Typography>
                  <Typography variant="body1">{classDetails.students.length}</Typography>
                </Grid>
              </Grid>
            </Grid>

            <Grid item xs={12}>
              <Divider sx={{ my: 2 }} />
              <Typography variant="h6">Students</Typography>
              {classDetails.students.length === 0 ? (
                <Typography sx={{ mt: 2 }}>No students assigned to this class.</Typography>
              ) : (
                <TableContainer component={Paper} sx={{ mt: 2 }}>
                  <Table>
                    <TableHead>
                      <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
                        <TableCell>Student</TableCell>
                        <TableCell>Email</TableCell>
                        <TableCell>CIN</TableCell>
                        <TableCell>Education Level</TableCell>
                        <TableCell align="right">Actions</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {classDetails.students.map((student) => (
                        <TableRow key={student._id} hover>
                          <TableCell>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <Avatar 
                                src={getProfileImageUrl(student)}
                                alt={`${student.firstName} ${student.lastName}`}
                                sx={{ mr: 2, width: 40, height: 40 }}
                              >
                                {student.firstName?.charAt(0)}{student.lastName?.charAt(0)}
                              </Avatar>
                              <Typography>{student.firstName} {student.lastName}</Typography>
                            </Box>
                          </TableCell>
                          <TableCell>{student.email}</TableCell>
                          <TableCell>{student.cin || 'Not provided'}</TableCell>
                          <TableCell>
                            <Chip 
                              label={student.educationLevel || 'BEGINNER'} 
                              size="small"
                              color={
                                student.educationLevel === 'ADVANCED' ? 'success' :
                                student.educationLevel === 'INTERMEDIATE' ? 'primary' : 'default'
                              }
                            />
                          </TableCell>
                          <TableCell align="right">
                            <Tooltip title="View Details">
                              <IconButton
                                onClick={() => handleViewStudent(student._id)}
                                size="small"
                              >
                                <VisibilityIcon />
                              </IconButton>
                            </Tooltip>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              )}
            </Grid>
          </Grid>
        </Paper>
      )}
    </Box>
  );
};

export default ClassDetails;
================================================================================
FILE: src\pages\tutor\Dashboard.jsx
================================================================================

import { Box, Typography, Paper, Grid } from '@mui/material';
import { useOutletContext } from 'react-router-dom';

const TutorDashboard = () => {
  const { user } = useOutletContext();

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Typography variant="h4" sx={{ mb: 4, color: '#dd2825', fontWeight: 'bold' }}>
        Tutor Dashboard
      </Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Paper
            elevation={3}
            sx={{
              p: 3,
              height: '100%',
              borderRadius: 2,
              bgcolor: 'white',
              border: '1px solid #eaeaea'
            }}
          >
            <Typography variant="h6" sx={{ mb: 2, color: '#dd2825' }}>
              Welcome to your Tutor Portal
            </Typography>
            <Typography variant="body1">
              Here you can monitor student projects, evaluate tasks, and provide guidance.
            </Typography>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={6}>
          <Paper
            elevation={3}
            sx={{
              p: 3,
              height: '100%',
              borderRadius: 2,
              bgcolor: 'white',
              border: '1px solid #eaeaea'
            }}
          >
            <Typography variant="h6" sx={{ mb: 2, color: '#dd2825' }}>
              Your Profile
            </Typography>
            {user && (
              <Box>
                <Typography variant="body1">
                  <strong>Name:</strong> {user.firstName} {user.lastName}
                </Typography>
                <Typography variant="body1">
                  <strong>Email:</strong> {user.email}
                </Typography>
                <Typography variant="body1">
                  <strong>Role:</strong> {user.userRole}
                </Typography>
              </Box>
            )}
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

export default TutorDashboard; 
================================================================================
FILE: src\pages\tutor\ProjectCreate.jsx
================================================================================

import { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Grid,
  Chip,
  InputAdornment,
  IconButton,
  FormHelperText,
  Alert
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { useNavigate } from 'react-router-dom';
import dayjs from 'dayjs';
import AddIcon from '@mui/icons-material/Add';
import CloseIcon from '@mui/icons-material/Close';

const ProjectCreate = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [tagInput, setTagInput] = useState('');
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    startDate: dayjs(),
    endDate: dayjs().add(30, 'day'),
    tags: []
  });
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleDateChange = (name, date) => {
    setFormData(prev => ({
      ...prev,
      [name]: date
    }));
  };
  
  const handleTagInputChange = (e) => {
    setTagInput(e.target.value);
  };
  
  const handleAddTag = () => {
    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, tagInput.trim()]
      }));
      setTagInput('');
    }
  };
  
  const handleDeleteTag = (tagToDelete) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToDelete)
    }));
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess(false);
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('You must be logged in to create a project');
      }
      
      const response = await fetch('http://localhost:5001/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          name: formData.name,
          description: formData.description,
          startDate: formData.startDate.format('YYYY-MM-DD'),
          endDate: formData.endDate.format('YYYY-MM-DD'),
          tags: formData.tags,
          status: 'PENDING'
        })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to create project');
      }
      
      setSuccess(true);
      
      // Reset form
      setFormData({
        name: '',
        description: '',
        startDate: dayjs(),
        endDate: dayjs().add(30, 'day'),
        tags: []
      });
      
      // Redirect to project page after a delay
      setTimeout(() => {
        navigate(`/tutor/projects/${data._id}`);
      }, 1500);
      
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" sx={{ mb: 3, color: '#dd2825' }}>Create New Project</Typography>
      
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}
      
      {success && (
        <Alert severity="success" sx={{ mb: 3 }}>
          Project created successfully! Redirecting...
        </Alert>
      )}
      
      <Paper sx={{ p: 3, borderRadius: 2 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                required
                fullWidth
                label="Project Name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                disabled={loading}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                required
                fullWidth
                multiline
                rows={4}
                label="Project Description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                disabled={loading}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Start Date"
                  value={formData.startDate}
                  onChange={(date) => handleDateChange('startDate', date)}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      required: true
                    }
                  }}
                  disabled={loading}
                />
              </LocalizationProvider>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="End Date"
                  value={formData.endDate}
                  onChange={(date) => handleDateChange('endDate', date)}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      required: true
                    }
                  }}
                  disabled={loading}
                  minDate={formData.startDate}
                />
              </LocalizationProvider>
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Add Tags"
                value={tagInput}
                onChange={handleTagInputChange}
                onKeyPress={handleKeyPress}
                disabled={loading}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={handleAddTag}
                        disabled={!tagInput.trim() || loading}
                      >
                        <AddIcon />
                      </IconButton>
                    </InputAdornment>
                  )
                }}
              />
              <FormHelperText>
                Press Enter or click the Add icon to add tags
              </FormHelperText>
              
              <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.tags.map((tag) => (
                  <Chip
                    key={tag}
                    label={tag}
                    onDelete={() => handleDeleteTag(tag)}
                    color="primary"
                    disabled={loading}
                  />
                ))}
              </Box>
            </Grid>
            
            <Grid item xs={12} sx={{ mt: 2 }}>
              <Button
                type="submit"
                variant="contained"
                disabled={loading}
                fullWidth
                sx={{
                  backgroundColor: '#dd2825',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: '#c42020'
                  }
                }}
              >
                {loading ? 'Creating...' : 'Create Project'}
              </Button>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default ProjectCreate; 
================================================================================
FILE: src\pages\tutor\ProjectDetails.jsx
================================================================================

// src/pages/tutor/ProjectDetails.jsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Chip,
  Divider,
  Grid,
  Alert,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  Avatar
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { api } from '../../api/axiosConfig';

const ProjectDetails = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [project, setProject] = useState(null);
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Fetch project and tasks data
  useEffect(() => {
    const fetchProjectAndTasks = async () => {
      try {
        setLoading(true);
        setError('');

        // Fetch project details
        const projectResponse = await api.get(`/projects/${projectId}`);
        setProject(projectResponse.data);

        // Fetch tasks specific to this project
        const tasksResponse = await api.get('/tasks', {
          params: { projectId }
        });
        setTasks(tasksResponse.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Failed to fetch project or tasks');
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchProjectAndTasks();
  }, [projectId]);

  // Navigation handlers
  const handleBack = () => {
    navigate('/tutor/projects');
  };

  const handleViewTasks = () => {
    navigate(`/tutor/projects/${projectId}/tasks`);
  };

  // Calculate task summary and progress
  const taskSummary = {
    todo: tasks.filter(t => t.status === 'TODO').length,
    inProgress: tasks.filter(t => t.status === 'IN_PROGRESS').length,
    completed: tasks.filter(t => t.status === 'COMPLETED').length
  };
  const totalTasks = tasks.length;
  const progress = totalTasks > 0 ? (taskSummary.completed / totalTasks) * 100 : 0;

  // Loading state
  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading project details...</Typography>
      </Box>
    );
  }

  // Error state
  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Projects
        </Button>
      </Box>
    );
  }

  // Main render
  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mr: 2 }}>
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          {project.name}
        </Typography>
      </Box>

      <Paper sx={{ p: 4 }}>
        {/* Project Overview */}
        <Typography variant="h6" gutterBottom>Project Overview</Typography>
        <Grid container spacing={2} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6}>
            <Typography><strong>Status:</strong> {project.status}</Typography>
            <Typography><strong>Description:</strong> {project.description || 'No description available'}</Typography>
          </Grid>
          <Grid item xs={12} sm={6}>
            <Button
              variant="contained"
              onClick={handleViewTasks}
              sx={{ backgroundColor: '#dd2825', '&:hover': { backgroundColor: '#c42020' } }}
            >
              View All Tasks
            </Button>
          </Grid>
        </Grid>

        <Divider sx={{ mb: 4 }} />

        {/* Task List */}
        <Typography variant="h6" gutterBottom>Tasks</Typography>
        {tasks.length === 0 ? (
          <Typography>No tasks found for this project.</Typography>
        ) : (
          <List>
            {tasks.map(task => (
              <ListItem
                key={task._id}
                button
                onClick={() => navigate(`/tutor/projects/${projectId}/tasks/${task._id}`)}
                sx={{ mb: 1, border: '1px solid #eee', borderRadius: '4px' }}
              >
                <ListItemText
                  primary={task.title}
                  secondary={
                    <>
                      <Chip
                        label={task.status}
                        size="small"
                        color={
                          task.status === 'COMPLETED' ? 'success' :
                          task.status === 'IN_PROGRESS' ? 'primary' : 'default'
                        }
                        sx={{ mr: 1 }}
                      />
                      <Chip
                        label={task.priority}
                        size="small"
                        color={
                          task.priority === 'HIGH' ? 'error' :
                          task.priority === 'MEDIUM' ? 'warning' : 'info'
                        }
                      />
                    </>
                  }
                />
              </ListItem>
            ))}
          </List>
        )}
        <Button
          variant="contained"
          onClick={() => navigate(`/tutor/projects/${projectId}/tasks/create`)}
          sx={{ mt: 2, backgroundColor: '#dd2825', '&:hover': { backgroundColor: '#c42020' } }}
        >
          Add Task
        </Button>

        <Divider sx={{ my: 4 }} />

        {/* Task Summary */}
        <Typography variant="h6" gutterBottom>Task Summary</Typography>
        <Grid container spacing={2} sx={{ mb: 4 }}>
          <Grid item xs={4}>
            <Typography>To Do: {taskSummary.todo}</Typography>
          </Grid>
          <Grid item xs={4}>
            <Typography>In Progress: {taskSummary.inProgress}</Typography>
          </Grid>
          <Grid item xs={4}>
            <Typography>Completed: {taskSummary.completed}</Typography>
          </Grid>
        </Grid>

        {/* Project Progress */}
        <Typography variant="h6" gutterBottom>Project Progress</Typography>
        <LinearProgress variant="determinate" value={progress} sx={{ mb: 1 }} />
        <Typography>{progress.toFixed(2)}% Complete</Typography>

        <Divider sx={{ my: 4 }} />

        {/* Team Members */}
        <Typography variant="h6" gutterBottom>Team Members</Typography>
        {project.members && project.members.length > 0 ? (
          <Grid container spacing={2}>
            {project.members.map(member => (
              <Grid item xs={12} sm={6} md={4} key={member._id}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <Avatar sx={{ mr: 2 }}>
                    {member.firstName[0]}{member.lastName[0]}
                  </Avatar>
                  <Typography>{member.firstName} {member.lastName}</Typography>
                </Box>
              </Grid>
            ))}
          </Grid>
        ) : (
          <Typography>No team members assigned.</Typography>
        )}
      </Paper>
    </Box>
  );
};

export default ProjectDetails;
================================================================================
FILE: src\pages\tutor\ProjectEdit.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  Chip,
  InputAdornment,
  IconButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  Paper,
  Alert,
  LinearProgress
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs from 'dayjs';

const ProjectEdit = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [tagInput, setTagInput] = useState('');
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    startDate: dayjs(),
    endDate: dayjs().add(30, 'day'),
    status: 'Planning',
    tags: []
  });

  useEffect(() => {
    const fetchProjectData = async () => {
      try {
        setLoading(true);
        setError('');
        
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Authentication token not found');
          setLoading(false);
          return;
        }
        
        const response = await fetch(`http://localhost:5001/api/projects/${projectId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to fetch project');
        }
        
        const data = await response.json();
        const project = data.project;
        
        setFormData({
          name: project.name,
          description: project.description,
          startDate: project.startDate ? dayjs(project.startDate) : dayjs(),
          endDate: project.endDate ? dayjs(project.endDate) : dayjs().add(30, 'day'),
          status: project.status || 'Planning',
          tags: project.tags || []
        });
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching project:', err);
        setError(err.message || 'Failed to load project data');
        setLoading(false);
      }
    };
    
    fetchProjectData();
  }, [projectId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleDateChange = (name, value) => {
    setFormData({ ...formData, [name]: value });
  };

  const handleTagInputChange = (e) => {
    setTagInput(e.target.value);
  };

  const handleAddTag = () => {
    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {
      setFormData({ ...formData, tags: [...formData.tags, tagInput.trim()] });
      setTagInput('');
    }
  };

  const handleDeleteTag = (tagToDelete) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(tag => tag !== tagToDelete)
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    setError('');
    setSuccess('');
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Authentication token not found');
      }
      
      const projectData = {
        name: formData.name,
        description: formData.description,
        startDate: formData.startDate.format('YYYY-MM-DD'),
        endDate: formData.endDate.format('YYYY-MM-DD'),
        status: formData.status,
        tags: formData.tags
      };
      
      const response = await fetch(`http://localhost:5001/api/projects/${projectId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(projectData)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update project');
      }
      
      setSuccess('Project updated successfully');
      setTimeout(() => {
        navigate(`/tutor/projects/${projectId}`);
      }, 1500);
    } catch (err) {
      console.error('Error updating project:', err);
      setError(err.message || 'Failed to update project');
    } finally {
      setSaving(false);
    }
  };

  const handleBack = () => {
    navigate(`/tutor/projects/${projectId}`);
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading project details...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Edit Project
        </Typography>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 3 }}>{success}</Alert>}

      <Paper sx={{ p: 4 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                name="name"
                label="Project Name"
                value={formData.name}
                onChange={handleInputChange}
                fullWidth
                required
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                name="description"
                label="Description"
                value={formData.description}
                onChange={handleInputChange}
                fullWidth
                multiline
                rows={4}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Start Date"
                  value={formData.startDate}
                  onChange={(newValue) => handleDateChange('startDate', newValue)}
                  sx={{ width: '100%' }}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={12} sm={6}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="End Date"
                  value={formData.endDate}
                  onChange={(newValue) => handleDateChange('endDate', newValue)}
                  sx={{ width: '100%' }}
                  minDate={formData.startDate}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Status</InputLabel>
                <Select
                  name="status"
                  value={formData.status}
                  onChange={handleInputChange}
                  label="Status"
                >
                  <MenuItem value="Planning">Planning</MenuItem>
                  <MenuItem value="In Progress">In Progress</MenuItem>
                  <MenuItem value="Completed">Completed</MenuItem>
                  <MenuItem value="On Hold">On Hold</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <TextField
                label="Add Tag"
                value={tagInput}
                onChange={handleTagInputChange}
                fullWidth
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton 
                        onClick={handleAddTag}
                        edge="end"
                      >
                        <AddIcon />
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    handleAddTag();
                  }
                }}
              />
              <FormHelperText>Press Enter or click the Add icon to add a tag</FormHelperText>
            </Grid>

            <Grid item xs={12}>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.tags.map((tag, index) => (
                  <Chip
                    key={index}
                    label={tag}
                    onDelete={() => handleDeleteTag(tag)}
                    deleteIcon={<DeleteIcon />}
                  />
                ))}
              </Box>
            </Grid>

            <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                type="submit"
                variant="contained"
                disabled={saving}
                sx={{
                  backgroundColor: '#dd2825',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: '#c42020'
                  }
                }}
              >
                {saving ? 'Saving...' : 'Save Changes'}
              </Button>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default ProjectEdit; 
================================================================================
FILE: src\pages\tutor\ProjectsList.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Typography, Paper, Card, CardContent, CardActions, Button, Chip, Grid, TextField, InputAdornment, LinearProgress, IconButton, Divider, Alert } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import VisibilityIcon from '@mui/icons-material/Visibility';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import AssignmentIcon from '@mui/icons-material/Assignment';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';

dayjs.extend(relativeTime);

const ProjectsList = () => {
  const navigate = useNavigate();
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');

  const getStatusColor = (status) => {
    switch (status) {
      case 'PENDING': return 'default';
      case 'IN_PROGRESS': return 'primary';
      case 'COMPLETED': return 'success';
      case 'ARCHIVED': return 'secondary';
      default: return 'default';
    }
  };

  const fetchProjects = async () => {
    setLoading(true);
    setError('');
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('You must be logged in to view projects');
      let url = 'http://localhost:5001/api/projects';
      if (searchQuery) url += `?search=${encodeURIComponent(searchQuery)}`;
      const response = await fetch(url, { headers: { 'Authorization': `Bearer ${token}` } });
      const data = await response.json();
      if (!response.ok) throw new Error(data.error || 'Failed to fetch projects');
      setProjects(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProjects();
  }, []);

  const handleSearchChange = (e) => setSearchQuery(e.target.value);
  const handleSearch = (e) => { e.preventDefault(); fetchProjects(); };
  const handleCreateProject = () => navigate('/tutor/projects/create');
  const handleViewProject = (projectId) => navigate(`/tutor/projects/${projectId}`);
  const handleEditProject = (projectId) => navigate(`/tutor/projects/${projectId}/edit`);
  const handleDeleteProject = async (projectId) => {
    if (!window.confirm('Are you sure you want to delete this project? This action cannot be undone.')) return;
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('You must be logged in to delete a project');
      const response = await fetch(`http://localhost:5001/api/projects/${projectId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      if (!response.ok) throw new Error(data.error || 'Failed to delete project');
      fetchProjects();
    } catch (err) {
      setError(err.message);
      alert('Error: ' + err.message);
    }
  };
  const handleManageTasks = (projectId) => navigate(`/tutor/projects/${projectId}/tasks`);

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>My Projects</Typography>
        <Button variant="contained" startIcon={<AddIcon />} onClick={handleCreateProject} sx={{ backgroundColor: '#dd2825', '&:hover': { backgroundColor: '#c42020' } }}>
          Create Project
        </Button>
      </Box>
      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
      <Paper sx={{ p: 2, mb: 3 }}>
        <form onSubmit={handleSearch}>
          <TextField
            fullWidth
            placeholder="Search projects by name, description, or tags..."
            value={searchQuery}
            onChange={handleSearchChange}
            InputProps={{
              startAdornment: <InputAdornment position="start"><SearchIcon /></InputAdornment>,
              endAdornment: <InputAdornment position="end"><Button type="submit" variant="contained" size="small">Search</Button></InputAdornment>
            }}
          />
        </form>
      </Paper>
      {loading ? (
        <LinearProgress />
      ) : projects.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ mb: 2 }}>No projects found</Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            {searchQuery ? "No projects match your search criteria. Try different keywords." : "You haven't created any projects yet. Click 'Create Project' to get started."}
          </Typography>
          {!searchQuery && (
            <Button variant="contained" startIcon={<AddIcon />} onClick={handleCreateProject} sx={{ backgroundColor: '#dd2825', '&:hover': { backgroundColor: '#c42020' } }}>
              Create Your First Project
            </Button>
          )}
        </Paper>
      ) : (
        <Grid container spacing={3}>
          {projects.map(project => (
            <Grid item xs={12} md={6} lg={4} key={project._id}>
              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column', transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out', '&:hover': { transform: 'translateY(-5px)', boxShadow: '0 10px 20px rgba(0,0,0,0.1)' } }}>
                <CardContent sx={{ flexGrow: 1 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="h6" noWrap sx={{ maxWidth: '70%' }}>{project.name}</Typography>
                    <Chip label={project.status.replace('_', ' ')} color={getStatusColor(project.status)} size="small" />
                  </Box>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2, height: '3em', overflow: 'hidden', textOverflow: 'ellipsis', display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>{project.description}</Typography>
                  <Box sx={{ mb: 2 }}>
                    <Typography variant="body2" color="text.secondary"><strong>Start:</strong> {dayjs(project.startDate).format('MMM D, YYYY')}</Typography>
                    <Typography variant="body2" color="text.secondary"><strong>End:</strong> {dayjs(project.endDate).format('MMM D, YYYY')}</Typography>
                  </Box>
                  {project.progressPercentage !== undefined && (
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <Box sx={{ width: '100%', mr: 1 }}><LinearProgress variant="determinate" value={project.progressPercentage} sx={{ height: 8, borderRadius: 5, backgroundColor: '#e0e0e0' }} /></Box>
                      <Box><Typography variant="body2" color="text.secondary">{`${Math.round(project.progressPercentage)}%`}</Typography></Box>
                    </Box>
                  )}
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>{project.tags && project.tags.map(tag => <Chip key={tag} label={tag} size="small" sx={{ backgroundColor: '#f1f1f1' }} />)}</Box>
                </CardContent>
                <Divider />
                <CardActions sx={{ justifyContent: 'space-between', p: 1 }}>
                  <Box>
                    <IconButton size="small" onClick={() => handleViewProject(project._id)} title="View Project"><VisibilityIcon /></IconButton>
                    <IconButton size="small" onClick={() => handleEditProject(project._id)} title="Edit Project"><EditIcon /></IconButton>
                    <IconButton size="small" onClick={() => handleDeleteProject(project._id)} title="Delete Project" color="error"><DeleteIcon /></IconButton>
                  </Box>
                  <Button size="small" startIcon={<AssignmentIcon />} onClick={() => handleManageTasks(project._id)} sx={{ color: '#dd2825' }}>Manage Tasks</Button>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
    </Box>
  );
};

export default ProjectsList;
================================================================================
FILE: src\pages\tutor\StudentsList.jsx
================================================================================

// src/pages/tutor/StudentsList.jsx
import { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  Chip,
  IconButton,
  TextField,
  InputAdornment,
  Button,
  LinearProgress,
  Alert,
  Avatar,
  Tooltip,
  TablePagination,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  Divider
} from '@mui/material';
import { 
  Visibility as VisibilityIcon,
  Search as SearchIcon,
  Mail as MailIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { fetchStudentsForTutor } from '../../api/classApi';

const StudentsList = () => {
  const navigate = useNavigate();
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);

  useEffect(() => {
    fetchStudents();
  }, []);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredStudents(students);
    } else {
      const lowercasedQuery = searchQuery.toLowerCase();
      const filtered = students.filter(student => 
        student.firstName.toLowerCase().includes(lowercasedQuery) ||
        student.lastName.toLowerCase().includes(lowercasedQuery) ||
        student.email.toLowerCase().includes(lowercasedQuery) ||
        (student.cin && student.cin.toLowerCase().includes(lowercasedQuery))
      );
      setFilteredStudents(filtered);
    }
  }, [searchQuery, students]);

  const getProfileImageUrl = (student) => {
    if (!student) return null;
    
    if (student.profilePicture || student.faceImage || student.avatar || student.profileImage) {
      const imagePath = student.profilePicture || student.faceImage || student.avatar || student.profileImage;
      
      if (imagePath.startsWith('http')) {
        return imagePath;
      } else {
        return `http://localhost:5001${imagePath.startsWith('/') ? '' : '/'}${imagePath}`;
      }
    }
    
    return null;
  };

  const fetchStudents = async () => {
    try {
      setLoading(true);
      setError('');
      
      const data = await fetchStudentsForTutor();
      
      const processedData = data.map(student => {
        const imageUrl = getProfileImageUrl(student);
        return {
          ...student,
          displayImage: imageUrl
        };
      });
      
      setStudents(processedData);
      setFilteredStudents(processedData);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching students:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
    setPage(0);
  };

  const handleViewDetails = (studentId) => {
    const student = students.find(s => s._id === studentId);
    if (student) {
      setSelectedStudent(student);
      setDetailsDialogOpen(true);
    }
  };

  const handleCloseDetails = () => {
    setDetailsDialogOpen(false);
  };

  const handleContactStudent = (email) => {
    window.location.href = `mailto:${email}`;
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" sx={{ mb: 3, color: '#dd2825' }}>Students Management</Typography>
      
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}
      
      <Paper sx={{ p: 2, mb: 3 }}>
        <TextField
          fullWidth
          placeholder="Search students by name, email, or CIN..."
          value={searchQuery}
          onChange={handleSearchChange}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon />
              </InputAdornment>
            )
          }}
        />
      </Paper>
      
      {loading ? (
        <LinearProgress />
      ) : filteredStudents.length === 0 ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h6">No Students Found</Typography>
          <Typography variant="body1" sx={{ mt: 1 }}>
            {searchQuery ? "No students match your search criteria. Try different keywords." : "You have no students assigned to your classes."}
          </Typography>
        </Paper>
      ) : (
        <>
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
                  <TableCell>Student</TableCell>
                  <TableCell>Email</TableCell>
                  <TableCell>CIN</TableCell>
                  <TableCell>Education Level</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell align="right">Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredStudents
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((student) => (
                    <TableRow key={student._id} hover>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar 
                            src={student.displayImage}
                            alt={`${student.firstName} ${student.lastName}`}
                            sx={{ 
                              mr: 2,
                              width: 40,
                              height: 40,
                              border: '1px solid #eee',
                              position: 'relative'
                            }}
                          >
                            {student.firstName ? student.firstName.charAt(0) : ''}
                            {student.lastName ? student.lastName.charAt(0) : ''}
                            
                            {student.profilePicture && 
                              <Tooltip title="Using profilePicture">
                                <Box sx={{ position: 'absolute', bottom: -3, right: -3, width: 8, height: 8, borderRadius: '50%', bgcolor: 'green' }} />
                              </Tooltip>
                            }
                            {!student.profilePicture && student.faceImage && 
                              <Tooltip title="Using faceImage">
                                <Box sx={{ position: 'absolute', bottom: -3, right: -3, width: 8, height: 8, borderRadius: '50%', bgcolor: 'blue' }} />
                              </Tooltip>
                            }
                          </Avatar>
                          <Typography>
                            {student.firstName} {student.lastName}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>{student.email}</TableCell>
                      <TableCell>{student.cin || 'Not provided'}</TableCell>
                      <TableCell>
                        <Chip 
                          label={student.educationLevel || 'BEGINNER'} 
                          size="small"
                          color={
                            student.educationLevel === 'ADVANCED' ? 'success' :
                            student.educationLevel === 'INTERMEDIATE' ? 'primary' : 'default'
                          }
                        />
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={student.accountStatus ? 'Active' : 'Inactive'} 
                          color={student.accountStatus ? 'success' : 'error'}
                          size="small"
                        />
                      </TableCell>
                      <TableCell align="right">
                        <Tooltip title="View Details">
                          <IconButton 
                            onClick={() => handleViewDetails(student._id)}
                            size="small"
                          >
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Contact Student">
                          <IconButton 
                            onClick={() => handleContactStudent(student.email)}
                            size="small"
                          >
                            <MailIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={filteredStudents.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        </>
      )}

      {/* Student Details Dialog */}
      <Dialog 
        open={detailsDialogOpen} 
        onClose={handleCloseDetails}
        maxWidth="md"
        fullWidth
      >
        {selectedStudent && (
          <>
            <DialogTitle>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="h6">Student Details</Typography>
                <IconButton onClick={handleCloseDetails}>
                  <CloseIcon />
                </IconButton>
              </Box>
            </DialogTitle>
            <DialogContent dividers>
              <Grid container spacing={3}>
                <Grid item xs={12} md={4} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                  <Avatar
                    src={selectedStudent.displayImage}
                    alt={`${selectedStudent.firstName} ${selectedStudent.lastName}`}
                    sx={{ width: 150, height: 150, mb: 2, border: '1px solid #eee', position: 'relative' }}
                  >
                    {selectedStudent.firstName?.charAt(0)}
                    {selectedStudent.lastName?.charAt(0)}
                    
                    {selectedStudent.profilePicture && 
                      <Tooltip title="Using profilePicture">
                        <Box sx={{ position: 'absolute', bottom: 0, right: 0, width: 15, height: 15, borderRadius: '50%', bgcolor: 'green' }} />
                      </Tooltip>
                    }
                    {!selectedStudent.profilePicture && selectedStudent.faceImage && 
                      <Tooltip title="Using faceImage">
                        <Box sx={{ position: 'absolute', bottom: 0, right: 0, width: 15, height: 15, borderRadius: '50%', bgcolor: 'blue' }} />
                      </Tooltip>
                    }
                  </Avatar>
                  
                  {(selectedStudent.profilePicture || selectedStudent.faceImage) && (
                    <Typography variant="caption" color="text.secondary" sx={{ mb: 1 }}>
                      {selectedStudent.profilePicture ? "Using profile picture" : "Using face image"}
                    </Typography>
                  )}
                  
                  <Typography variant="h6" sx={{ mb: 0.5 }}>
                    {selectedStudent.firstName} {selectedStudent.lastName}
                  </Typography>
                  <Chip 
                    label={selectedStudent.accountStatus ? 'Active' : 'Inactive'} 
                    color={selectedStudent.accountStatus ? 'success' : 'error'}
                    size="small"
                    sx={{ mb: 2 }}
                  />
                </Grid>
                
                <Grid item xs={12} md={8}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Personal Information</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Email</Typography>
                      <Typography variant="body1">{selectedStudent.email}</Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Phone</Typography>
                      <Typography variant="body1">{selectedStudent.phone || 'Not provided'}</Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">CIN</Typography>
                      <Typography variant="body1">{selectedStudent.cin || 'Not provided'}</Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Birth Date</Typography>
                      <Typography variant="body1">
                        {selectedStudent.birthDate 
                          ? new Date(selectedStudent.birthDate).toLocaleDateString() 
                          : 'Not provided'}
                      </Typography>
                    </Grid>
                  </Grid>
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Academic Information</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Class</Typography>
                      <Typography variant="body1">{selectedStudent.classe?.name || 'Not assigned'}</Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Education Level</Typography>
                      <Chip 
                        label={selectedStudent.educationLevel || 'BEGINNER'} 
                        size="small"
                        color={
                          selectedStudent.educationLevel === 'ADVANCED' ? 'success' :
                          selectedStudent.educationLevel === 'INTERMEDIATE' ? 'primary' : 'default'
                        }
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Department</Typography>
                      <Typography variant="body1">{selectedStudent.department || 'Not specified'}</Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Team</Typography>
                      <Typography variant="body1">{selectedStudent.teamRef ? 'Assigned' : 'Not assigned'}</Typography>
                    </Grid>
                  </Grid>
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>Account Information</Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Account Status</Typography>
                      <Chip 
                        label={selectedStudent.accountStatus ? 'Active' : 'Inactive'} 
                        color={selectedStudent.accountStatus ? 'success' : 'error'}
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Email Verified</Typography>
                      <Chip 
                        label={selectedStudent.isEmailVerified ? 'Verified' : 'Not verified'} 
                        color={selectedStudent.isEmailVerified ? 'success' : 'warning'}
                        size="small"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Created At</Typography>
                      <Typography variant="body1">
                        {selectedStudent.createdAt 
                          ? new Date(selectedStudent.createdAt).toLocaleDateString() 
                          : 'Unknown'}
                      </Typography>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Typography variant="body2" color="text.secondary">Last Login</Typography>
                      <Typography variant="body1">
                        {selectedStudent.lastLogin 
                          ? new Date(selectedStudent.lastLogin).toLocaleDateString() 
                          : 'Never'}
                      </Typography>
                    </Grid>
                  </Grid>
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleCloseDetails}>Close</Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default StudentsList;
================================================================================
FILE: src\pages\tutor\TaskCreate.jsx
================================================================================

import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Button,
  Container,
  Grid,
  TextField,
  MenuItem,
  Typography,
  Alert,
} from '@mui/material';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { api } from '../../api/axiosConfig'; // Adjust path based on your project structure

const TaskCreate = () => {
  const { projectId } = useParams(); // Get projectId from URL
  console.log('Project ID:', projectId);
  const navigate = useNavigate();

  // State for form fields
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    status: 'To Do',
    priority: 'Medium',
    dueDate: null,
  });

  // State for feedback messages
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [loading, setLoading] = useState(false);

  // Options for dropdowns
  const statusOptions = ['To Do', 'In Progress', 'Done'];
  const priorityOptions = ['Low', 'Medium', 'High'];

  // Mapping functions for backend compatibility
  const statusMap = {
    'To Do': 'TODO',
    'In Progress': 'IN_PROGRESS',
    'Done': 'COMPLETED',
  };

  const priorityMap = {
    'Low': 'LOW',
    'Medium': 'MEDIUM',
    'High': 'HIGH',
  };

  // Handle form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // Handle date picker change
  const handleDateChange = (newValue) => {
    setFormData((prev) => ({ ...prev, dueDate: newValue }));
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setSuccessMessage('');
    setErrorMessage('');
  
    const taskData = {
      title: formData.title,
      description: formData.description,
      status: statusMap[formData.status],
      priority: priorityMap[formData.priority],
      dueDate: formData.dueDate ? formData.dueDate.format('YYYY-MM-DD') : null,
      projectRef: projectId,
    };
  
    console.log('Sending taskData:', taskData);
  
    try {
      const response = await api.post('/tasks', taskData);
      setSuccessMessage('Task created successfully');
      setTimeout(() => {
        navigate('..');
      }, 1500);
    } catch (error) {
      const errorMsg = error.response?.data?.error || 'Failed to create task';
      setErrorMessage(errorMsg);
      console.error('Error details:', {
        status: error.response?.status,
        data: error.response?.data,
      });
    } finally {
      setLoading(false);
    }
  };

  // Handle back navigation
  const handleBack = () => {
    navigate('..'); // Navigate back to tasks list
  };

  return (
    <Container maxWidth="md">
      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          Create New Task
        </Typography>

        {/* Success/Error Messages */}
        {successMessage && (
          <Alert severity="success" sx={{ mb: 2 }}>
            {successMessage}
          </Alert>
        )}
        {errorMessage && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {errorMessage}
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {/* Title */}
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </Grid>

            {/* Description */}
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                multiline
                rows={4}
                disabled={loading}
              />
            </Grid>

            {/* Status */}
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                select
                label="Status"
                name="status"
                value={formData.status}
                onChange={handleChange}
                disabled={loading}
              >
                {statusOptions.map((option) => (
                  <MenuItem key={option} value={option}>
                    {option}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>

            {/* Priority */}
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                select
                label="Priority"
                name="priority"
                value={formData.priority}
                onChange={handleChange}
                disabled={loading}
              >
                {priorityOptions.map((option) => (
                  <MenuItem key={option} value={option}>
                    {option}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>

            {/* Due Date */}
            <Grid item xs={12}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Due Date"
                  value={formData.dueDate}
                  onChange={handleDateChange}
                  disabled={loading}
                  renderInput={(params) => (
                    <TextField {...params} fullWidth />
                  )}
                />
              </LocalizationProvider>
            </Grid>

            {/* Buttons */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button
                  variant="contained"
                  color="primary"
                  type="submit"
                  disabled={loading}
                >
                  {loading ? 'Creating...' : 'Create Task'}
                </Button>
                <Button
                  variant="outlined"
                  color="secondary"
                  onClick={handleBack}
                  disabled={loading}
                >
                  Back
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Box>
    </Container>
  );
};

export default TaskCreate;
================================================================================
FILE: src\pages\tutor\TaskDetails.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Chip,
  Divider,
  Grid,
  Alert,
  LinearProgress
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const TaskDetails = () => {
  const { projectId, taskId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [task, setTask] = useState(null);

  useEffect(() => {
    // Placeholder for loading task details
    const timer = setTimeout(() => {
      setLoading(false);
      setTask({
        _id: taskId,
        title: 'Sample Task',
        description: 'This is a placeholder for the task description.',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        priority: 'Medium',
        status: 'In Progress',
        createdAt: new Date().toISOString()
      });
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [taskId]);

  const handleBack = () => {
    navigate(`/tutor/projects/${projectId}/tasks`);
  };

  const handleEdit = () => {
    navigate(`/tutor/projects/${projectId}/tasks/${taskId}/edit`);
  };

  const handleDelete = () => {
    // Add delete logic here
    alert('Delete functionality coming soon');
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading task details...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
        <Button sx={{ mt: 2 }} onClick={handleBack}>
          Back to Tasks
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Task Details
        </Typography>
      </Box>

      {task && (
        <Paper sx={{ p: 4 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3, flexWrap: 'wrap', gap: 2 }}>
            <Typography variant="h4">{task.title}</Typography>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button
                variant="outlined"
                startIcon={<EditIcon />}
                onClick={handleEdit}
              >
                Edit
              </Button>
              <Button
                variant="outlined"
                color="error"
                startIcon={<DeleteIcon />}
                onClick={handleDelete}
              >
                Delete
              </Button>
            </Box>
          </Box>

          <Divider sx={{ mb: 3 }} />

          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6">Description</Typography>
              <Typography paragraph>{task.description}</Typography>
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Status</Typography>
              <Chip 
                label={task.status} 
                color={
                  task.status === 'Done' ? 'success' : 
                  task.status === 'In Progress' ? 'primary' : 
                  'default'
                } 
                sx={{ mt: 1 }} 
              />
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Priority</Typography>
              <Chip 
                label={task.priority} 
                color={
                  task.priority === 'High' ? 'error' : 
                  task.priority === 'Medium' ? 'warning' : 
                  'info'
                } 
                sx={{ mt: 1 }} 
              />
            </Grid>

            <Grid item xs={12} sm={4}>
              <Typography variant="h6">Due Date</Typography>
              <Typography>
                {new Date(task.dueDate).toLocaleDateString()}
              </Typography>
            </Grid>
          </Grid>
        </Paper>
      )}
    </Box>
  );
};

export default TaskDetails; 
================================================================================
FILE: src\pages\tutor\TaskEdit.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Paper,
  Alert,
  LinearProgress
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import dayjs from 'dayjs';

const TaskEdit = () => {
  const { projectId, taskId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    dueDate: null,
    priority: '',
    status: ''
  });

  useEffect(() => {
    // Placeholder for loading task details
    const timer = setTimeout(() => {
      setLoading(false);
      setFormData({
        title: 'Sample Task',
        description: 'This is a placeholder for the task description.',
        dueDate: dayjs().add(7, 'day'),
        priority: 'Medium',
        status: 'In Progress'
      });
    }, 1000);
    
    return () => clearTimeout(timer);
  }, [taskId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleDateChange = (newValue) => {
    setFormData({ ...formData, dueDate: newValue });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    setError('');
    setSuccess('');
    
    // Simulate saving
    setTimeout(() => {
      setSaving(false);
      setSuccess('Task updated successfully');
      setTimeout(() => {
        navigate(`/tutor/projects/${projectId}/tasks/${taskId}`);
      }, 1500);
    }, 1500);
  };

  const handleBack = () => {
    navigate(`/tutor/projects/${projectId}/tasks/${taskId}`);
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading task details...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <Button
          startIcon={<ArrowBackIcon />}
          onClick={handleBack}
          sx={{ mr: 2 }}
        >
          Back
        </Button>
        <Typography variant="h5" sx={{ color: '#dd2825' }}>
          Edit Task
        </Typography>
      </Box>

      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 3 }}>{success}</Alert>}

      <Paper sx={{ p: 4 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                name="title"
                label="Task Title"
                value={formData.title}
                onChange={handleInputChange}
                fullWidth
                required
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                name="description"
                label="Description"
                value={formData.description}
                onChange={handleInputChange}
                fullWidth
                multiline
                rows={4}
              />
            </Grid>

            <Grid item xs={12} sm={4}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label="Due Date"
                  value={formData.dueDate}
                  onChange={handleDateChange}
                  sx={{ width: '100%' }}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={12} sm={4}>
              <FormControl fullWidth>
                <InputLabel>Priority</InputLabel>
                <Select
                  name="priority"
                  value={formData.priority}
                  onChange={handleInputChange}
                  label="Priority"
                >
                  <MenuItem value="Low">Low</MenuItem>
                  <MenuItem value="Medium">Medium</MenuItem>
                  <MenuItem value="High">High</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={4}>
              <FormControl fullWidth>
                <InputLabel>Status</InputLabel>
                <Select
                  name="status"
                  value={formData.status}
                  onChange={handleInputChange}
                  label="Status"
                >
                  <MenuItem value="To Do">To Do</MenuItem>
                  <MenuItem value="In Progress">In Progress</MenuItem>
                  <MenuItem value="Done">Done</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                type="submit"
                variant="contained"
                disabled={saving}
                sx={{
                  backgroundColor: '#dd2825',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: '#c42020'
                  }
                }}
              >
                {saving ? 'Saving...' : 'Save Changes'}
              </Button>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default TaskEdit; 
================================================================================
FILE: src\pages\tutor\TasksList.jsx
================================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  Button,
  Alert,
  LinearProgress,
  Grid,
  Card,
  CardContent,
  CardActions,
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import AddIcon from '@mui/icons-material/Add';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import {
  fetchTasksByProject,
  updateTaskStatus,
} from '../../api/taskApi';

const TasksList = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [tasks, setTasks] = useState([]);
  const [key, setKey] = useState(0); // Force re-render with a key

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        setLoading(true);
        console.log('Fetching tasks for project:', projectId);
        const tasksData = await fetchTasksByProject(projectId);
        console.log('Tasks fetched:', tasksData);
        if (Array.isArray(tasksData)) {
          setTasks(tasksData);
          setKey((prev) => prev + 1); // Update key to force re-render
        } else {
          console.warn('Tasks data is not an array:', tasksData);
          setTasks([]);
          setKey((prev) => prev + 1); // Update key on empty data
        }
      } catch (err) {
        console.error('Error fetching tasks:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchTasks();
  }, [projectId]);

  const groupTasksByStatus = (tasks) => {
    return {
      TODO: tasks.filter((task) => task.status === 'TODO'),
      IN_PROGRESS: tasks.filter((task) => task.status === 'IN_PROGRESS'),
      COMPLETED: tasks.filter((task) => task.status === 'COMPLETED'),
    };
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'TODO':
        return '#1976d2'; // Blue
      case 'IN_PROGRESS':
        return '#f57c00'; // Orange
      case 'COMPLETED':
        return '#388e3c'; // Green
      default:
        return '#dd2825'; // Red as fallback
    }
  };

  const onDragEnd = async (result) => {
    const { destination, source, draggableId } = result;

    console.log('Drag end:', { destination, source, draggableId });
    console.log('Current tasks state:', tasks);

    if (!destination) {
      console.log('No destination, drag cancelled');
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      console.log('Same position, no update needed');
      return;
    }

    const newStatus = destination.droppableId;
    const taskId = draggableId;

    // Verify task exists in current state
    const taskToMove = tasks.find((task) => task._id.toString() === taskId);
    if (!taskToMove) {
      console.error(`Task with id ${taskId} not found in state`);
      setError(`Task with id ${taskId} not found`);
      return;
    }

    console.log(`Dragging task ${taskId} from ${source.droppableId} to ${newStatus}`);

    // Optimistically update the UI
    const updatedTasks = tasks.map((task) =>
      task._id.toString() === taskId ? { ...task, status: newStatus } : task
    );
    setTasks(updatedTasks);
    setKey((prev) => prev + 1); // Force re-render

    try {
      await updateTaskStatus(taskId, newStatus);
      console.log(`Task ${taskId} status updated to ${newStatus}`);
    } catch (err) {
      console.error('Error updating task status:', err);
      setError('Failed to update task status');
      // Revert the UI change if the API call fails
      const revertedTasks = tasks.map((task) =>
        task._id.toString() === taskId ? { ...task, status: source.droppableId } : task
      );
      setTasks(revertedTasks);
      setKey((prev) => prev + 1); // Force re-render on revert
    }
  };

  const handleBack = () => {
    navigate(`/tutor/project/${projectId}`);
  };

  const handleCreateTask = () => {
    navigate(`/tutor/projects/${projectId}/tasks/create`); // Updated to match route
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2, textAlign: 'center' }}>Loading tasks...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  const groupedTasks = groupTasksByStatus(tasks);

  return (
    <Box sx={{ p: 3 }} key={key}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3, flexWrap: 'wrap', gap: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Button
            startIcon={<ArrowBackIcon />}
            onClick={handleBack}
            variant="outlined"
            sx={{ color: '#dd2825', borderColor: '#dd2825' }}
          >
            Back to Project
          </Button>
          <Typography variant="h5" sx={{ color: '#dd2825' }}>
            Tasks Management
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={handleCreateTask}
          sx={{
            backgroundColor: '#dd2825',
            color: 'white',
            '&:hover': {
              backgroundColor: '#c42020',
            },
          }}
        >
          Create Task
        </Button>
      </Box>
      <Paper sx={{ p: 4, borderRadius: 2 }}>
        <Typography variant="h6" sx={{ color: '#dd2825', mb: 3 }}>
          Kanban Board
        </Typography>
        <DragDropContext onDragEnd={onDragEnd}>
          <Grid container spacing={3}>
            {['TODO', 'IN_PROGRESS', 'COMPLETED'].map((status) => (
              <Grid item xs={12} md={4} key={status}>
                <Droppable droppableId={status}>
                  {(provided) => (
                    <Box
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      sx={{
                        minHeight: '300px',
                        backgroundColor: '#f5f5f5',
                        borderRadius: 2,
                        padding: 2,
                      }}
                    >
                      <Typography
                        variant="h6"
                        sx={{
                          color: '#dd2825',
                          fontWeight: 'bold',
                          mb: 2,
                          textAlign: 'center',
                        }}
                      >
                        {status} ({groupedTasks[status].length})
                      </Typography>
                      {groupedTasks[status].map((task, index) => {
                        console.log(`Rendering task ${task._id} in ${status} column`);
                        return (
                          <Draggable
                            key={task._id.toString()}
                            draggableId={task._id.toString()}
                            index={index}
                          >
                            {(provided) => (
                              <Card
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                sx={{
                                  mb: 2,
                                  backgroundColor: '#fff',
                                  borderLeft: `4px solid ${getStatusColor(task.status)}`,
                                  cursor: 'grab',
                                  '&:hover': {
                                    boxShadow: 3,
                                  },
                                }}
                              >
                                <CardContent>
                                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
                                    {task.title}
                                  </Typography>
                                  <Typography variant="body2" color="text.secondary">
                                    Status: {task.status}
                                  </Typography>
                                  <Typography variant="caption">
                                    Due: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
                                  </Typography>
                                  {task.assignedTo && (
                                    <Typography variant="caption">
                                      Assigned: {task.assignedTo.firstName} {task.assignedTo.lastName}
                                    </Typography>
                                  )}
                                </CardContent>
                                <CardActions sx={{ justifyContent: 'flex-end' }}>
                                  <Button
                                    size="small"
                                    onClick={() => navigate(`/tutor/tasks/${task._id}`)}
                                    sx={{ color: '#dd2825' }}
                                  >
                                    View
                                  </Button>
                                </CardActions>
                              </Card>
                            )}
                          </Draggable>
                        );
                      })}
                      {provided.placeholder}
                    </Box>
                  )}
                </Droppable>
              </Grid>
            ))}
          </Grid>
        </DragDropContext>
      </Paper>
    </Box>
  );
};

export default TasksList;
================================================================================
FILE: src\pages\VerifyEmail.jsx
================================================================================

import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Container, Box, Typography, Button, Paper, Alert } from "@mui/material";
import { styled } from "@mui/material/styles";
import axios from "axios";

// Styled components
const StyledPaper = styled(Paper)(({ theme }) => ({
  marginTop: theme.spacing(8),
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  background: 'rgba(255, 255, 255, 0.9)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  boxShadow: '0 4px 30px rgba(0, 0, 0, 0.1)',
}));

const StyledButton = styled(Button)(({ theme }) => ({
  margin: theme.spacing(2, 0),
  padding: theme.spacing(1.5),
  borderRadius: '8px',
  textTransform: 'none',
  fontSize: '1rem',
  '&.MuiButton-containedPrimary': {
    backgroundColor: '#dd2825',
    '&:hover': {
      backgroundColor: 'rgba(221, 40, 37, 0.7)',
    },
  },
}));

const VerifyEmail = () => {
  const { token } = useParams(); // Retrieve the token from the URL
  const navigate = useNavigate(); // Initialize useNavigate for redirection

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const verifyEmailToken = async () => {
      try {
        const response = await axios.get(`http://localhost:5001/api/auth/verify-email/${token}`);
        setMessage(response.data.message); // Set success message
      } catch (err) {
        setError(err.response?.data?.message || "Verification failed"); // Set error message
      }
    };

    verifyEmailToken(); // Call the function to verify the token
  }, [token]); // Run this effect when the token changes

  return (
    <Container component="main" maxWidth="xs">
      <StyledPaper elevation={6}>
        {/* Centered Logo */}
        <Box component="div" sx={{ flexGrow: 1, display: 'flex', justifyContent: 'center', mb: 3 }}>
          <img src="/logo.png" alt="Logo" style={{ height: '70px', width: 'auto' }} />
        </Box>
        
        {message && <Alert severity="success" sx={{ mb: 2, width: '100%' }}>{message}</Alert>}
        
        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Typography variant="body2" color="textSecondary">
            Return to <a href="/signin" style={{ textDecoration: 'none', color: '#dd2825' }}>Sign In</a>
          </Typography>
        </Box>
      </StyledPaper>
    </Container>
  );
};

export default VerifyEmail;
================================================================================
FILE: src\utils\authUtils.js
================================================================================

// Check if user is authenticated
export const isAuthenticated = () => {
  const token = localStorage.getItem('token');
  return !!token;
}; 
================================================================================
FILE: src\utils\errorHandler.js
================================================================================

// src/utils/errorHandler.js
export const handleApiError = (error) => {
  if (error.response) {
    // Server responded with error
    const message = error.response.data?.message || 'Server error occurred';
    const status = error.response.status;
    return { message, status };
  } else if (error.request) {
    // Request made but no response
    return { message: 'No response from server', status: 503 };
  } else {
    // Request setup error
    return { message: 'Failed to make request', status: 500 };
  }
};
================================================================================
FILE: src\config\apiConfig.js
================================================================================

// src/config/apiConfig.js
export const API_BASE_URL = 'http://localhost:5001/api';
================================================================================
FILE: src\App.jsx
================================================================================

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { ThemeProvider, CssBaseline } from '@mui/material';
import { createTheme } from '@mui/material/styles';
import { GoogleOAuthProvider } from '@react-oauth/google';
import SignIn from "./pages/SignIn";
import SignUp from "./pages/SignUp";
import NotFound from "./pages/NotFound";
import DashboardLayout from "./components/layout/DashboardLayout";
import StudentDashboardLayout from "./components/layout/StudentDashboardLayout";
import TutorDashboardLayout from "./components/layout/TutorDashboardLayout";
import UsersList from "./pages/admin/UsersList";
import ForgotPassword from "./pages/forgotPassword";
import ResetPassword from "./pages/reserPassword";
import SubmitTask from "./pages/admin/SubmitTask"; 
import Profile from "./pages/admin/Profile";
import StudentDashboard from "./pages/student/Dashboard";
import TutorDashboard from "./pages/tutor/Dashboard";
import AuthTransfer from "./pages/AuthTransfer";
import VerifyEmail from "./pages/VerifyEmail";
import ProjectsList from "./pages/tutor/ProjectsList";
import ProjectCreate from "./pages/tutor/ProjectCreate";
import ProjectDetails from "./pages/tutor/ProjectDetails";
import ProjectEdit from "./pages/tutor/ProjectEdit";
import TasksList from "./pages/tutor/TasksList";
import TaskCreate from "./pages/tutor/TaskCreate";
import TaskDetails from "./pages/tutor/TaskDetails";
import TaskEdit from "./pages/tutor/TaskEdit";
import StudentProjectsList from "./pages/student/ProjectsList";
import StudentProjectDetails from "./pages/student/ProjectDetails";
import StudentTasksList from "./pages/student/TasksList";
import StudentTaskDetails from "./pages/student/TaskDetails";
import StudentsList from './pages/tutor/StudentsList';
import ClassesList from './pages/tutor/ClassesList'; // New import pages/tutor/ClassesList
import ClassDetails from './pages/tutor/components/ClassDetails'; // New import
import ClassesManagement from './pages/admin/ClassesManagement'; // New import

const theme = createTheme({
  palette: {
    primary: {
      main: '#A4A4A4',
    },
    secondary: {
      main: '#F1F0FB',
    },
    error: {
      main: '#ea384c',
    },
    text: {
      primary: '#222222',
    },
  },
  typography: {
    fontFamily: '"Inter", "Roboto", "Helvetica", "Arial", sans-serif',
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: '8px',
          textTransform: 'none',
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: '8px',
          },
        },
      },
    },
  },
});

const queryClient = new QueryClient();

const App = () => (
  <GoogleOAuthProvider clientId={import.meta.env.VITE_GOOGLE_CLIENT_ID}>
    <QueryClientProvider client={queryClient}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Navigate to="/signin" replace />} />
            <Route path="/signin" element={<SignIn />} />
            <Route path="/signup" element={<SignUp />} />
            <Route path="/forgot-password" element={<ForgotPassword />} />
            <Route path="/reset-password/:token" element={<ResetPassword />} />
            <Route path="/auth-transfer" element={<AuthTransfer />} />
            <Route path="/verify-email/:token" element={<VerifyEmail />} />

            {/* Admin Dashboard Routes */}
            <Route path="/admin" element={<DashboardLayout />}>
              <Route index element={<Navigate to="/admin/users" replace />} />
              <Route path="profile" element={<Profile />} />
              <Route path="users" element={<UsersList />} />
              <Route path="users/students" element={<UsersList />} />
              <Route path="users/tutors" element={<UsersList />} />
              <Route path="submit-task" element={<SubmitTask />} />
              <Route path="classes" element={<ClassesManagement />} /> {/* New route */}
            </Route>

            {/* Student Dashboard Routes */}
            <Route path="/student" element={<StudentDashboardLayout />}>
              <Route index element={<StudentDashboard />} />
              <Route path="profile" element={<Profile />} />
              <Route path="projects" element={<StudentProjectsList />} />
              <Route path="projects/:projectId" element={<StudentProjectDetails />} />
              <Route path="projects/:projectId/tasks" element={<StudentTasksList />} />
              <Route path="projects/:projectId/tasks/:taskId" element={<StudentTaskDetails />} />
              <Route path="tasks" element={<StudentTasksList />} />
              <Route path="tasks/:taskId" element={<StudentTaskDetails />} />
              <Route path="team" element={<div>Team Page</div>} />
            </Route>

            {/* Tutor Dashboard Routes */}
            <Route path="/tutor" element={<TutorDashboardLayout />}>
              <Route index element={<TutorDashboard />} />
              <Route path="profile" element={<Profile />} />
              <Route path="students" element={<StudentsList />} />
              <Route path="evaluations" element={<div>Evaluations Page</div>} />
              <Route path="projects" element={<ProjectsList />} />
              <Route path="projects/create" element={<ProjectCreate />} />
              <Route path="projects/:projectId" element={<ProjectDetails />} />
              <Route path="projects/:projectId/edit" element={<ProjectEdit />} />
              <Route path="projects/:projectId/tasks" element={<TasksList />} />
              <Route path="projects/:projectId/tasks/create" element={<TaskCreate />} />
              <Route path="projects/:projectId/tasks/:taskId" element={<TaskDetails />} />
              
              <Route path="projects/:projectId/tasks/:taskId/edit" element={<TaskEdit />} />
              <Route path="classes" element={<ClassesList />} /> {/* New route */}
              <Route path="classes/:classId" element={<ClassDetails />} /> {/* New route */}
              <Route path="assignments" element={<div>Assignments Page</div>} /> {/* New route */}
              <Route path="groups" element={<div>Groups Page</div>} /> {/* New route */}
            </Route>

            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </ThemeProvider>
    </QueryClientProvider>
  </GoogleOAuthProvider>
);

export default App;
================================================================================
FILE: src\main.jsx
================================================================================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================================================================================
FILE: src\App.css
================================================================================


#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================================================================================
FILE: src\index.css
================================================================================

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #dd2825;
  --primary-dark: #8b74f2;
  --secondary: #dd2825;
  --text: #222222;
  --error: #ea384c;
}

body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: linear-gradient(135deg, var(--secondary) 0%, #ffffff 100%);
  min-height: 100vh;
}

.glass-effect {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
}


================================================================================
FILE: .env
================================================================================

VITE_API_BASE_URL=****REDACTED****
VITE_GOOGLE_CLIENT_ID=307626813879-okfk3jlk3b3ivq9gcih2qe1je8enr5l4.apps.googleusercontent.com

================================================================================
FILE: package.json
================================================================================

{
  "name": "vite-react-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^5.16.14",
    "@mui/material": "^5.16.14",
    "@mui/x-date-pickers": "^6.20.2",
    "@react-oauth/google": "^0.12.1",
    "@tanstack/react-query": "^5.22.2",
    "axios": "^1.8.2",
    "dayjs": "^1.11.13",
    "dotenv": "^16.4.7",
    "face-api.js": "^0.22.2",
    "prop-types": "^15.8.1",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.30.0",
    "sweetalert2": "^11.17.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.20.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.17",
    "eslint": "^9.20.1",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "vite": "^6.1.0"
  }
}

================================================================================
FILE: vite.config.js
================================================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================================================================================
FILE: tailwind.config.js
================================================================================

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: 'var(--primary)',
        'primary-dark': 'var(--primary-dark)',
        secondary: 'var(--secondary)',
        text: 'var(--text)',
        error: 'var(--error)',
      },
    },
  },
  plugins: [],
}
================================================================================
FILE: postcss.config.js
================================================================================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
================================================================================
FILE: index.html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
